// Code generated by go-bindata.
// sources:
// examples/image-streams/image-streams-centos7.json
// examples/image-streams/image-streams-rhel7.json
// examples/db-templates/mariadb-ephemeral-template.json
// examples/db-templates/mariadb-persistent-template.json
// examples/db-templates/mongodb-ephemeral-template.json
// examples/db-templates/mongodb-persistent-template.json
// examples/db-templates/mysql-ephemeral-template.json
// examples/db-templates/mysql-persistent-template.json
// examples/db-templates/postgresql-ephemeral-template.json
// examples/db-templates/postgresql-persistent-template.json
// examples/db-templates/redis-ephemeral-template.json
// examples/db-templates/redis-persistent-template.json
// examples/jenkins/jenkins-ephemeral-template.json
// examples/jenkins/jenkins-persistent-template.json
// examples/jenkins/pipeline/bluegreen-pipeline.yaml
// examples/jenkins/pipeline/mapsapp-pipeline.yaml
// examples/jenkins/pipeline/maven-pipeline.yaml
// examples/jenkins/pipeline/nodejs-sample-pipeline.yaml
// examples/jenkins/pipeline/openshift-client-plugin-pipeline.yaml
// examples/jenkins/pipeline/samplepipeline.yaml
// examples/quickstarts/cakephp-mysql-persistent.json
// examples/quickstarts/cakephp-mysql.json
// examples/quickstarts/dancer-mysql-persistent.json
// examples/quickstarts/dancer-mysql.json
// examples/quickstarts/django-postgresql-persistent.json
// examples/quickstarts/django-postgresql.json
// examples/quickstarts/httpd.json
// examples/quickstarts/nginx.json
// examples/quickstarts/nodejs-mongodb-persistent.json
// examples/quickstarts/nodejs-mongodb.json
// examples/quickstarts/rails-postgresql-persistent.json
// examples/quickstarts/rails-postgresql.json
// examples/heapster/heapster-standalone.yaml
// examples/prometheus/prometheus.yaml
// examples/service-catalog/service-catalog.yaml
// install/etcd/etcd.yaml
// install/kube-apiserver/apiserver.yaml
// install/kube-controller-manager/kube-controller-manager.yaml
// install/kube-dns/install.yaml
// install/kube-proxy/install.yaml
// install/kube-scheduler/kube-scheduler.yaml
// install/openshift-apiserver/install.yaml
// install/openshift-controller-manager/install.yaml
// install/origin-web-console/console-config.yaml
// install/origin-web-console/console-template.yaml
// install/service-catalog-broker-resources/template-service-broker-registration.yaml
// install/templateservicebroker/apiserver-config.yaml
// install/templateservicebroker/apiserver-template.yaml
// install/templateservicebroker/rbac-template.yaml
// pkg/image/admission/apis/imagepolicy/v1/default-policy.yaml
// DO NOT EDIT!

package bootstrap

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplesImageStreamsImageStreamsCentos7Json = []byte(`{
  "kind": "ImageStreamList",
  "apiVersion": "v1",
  "items": [
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": ".NET Core Builder Images"
        },
        "name": "dotnet"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run .NET Core applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/redhat-developer/s2i-dotnetcore/tree/master/2.0/build/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of .NET Core available on OpenShift, including major versions updates.",
              "iconClass": "icon-dotnet",
              "openshift.io/display-name": ".NET Core (Latest)",
              "sampleContextDir": "app",
              "sampleRef": "dotnetcore-2.0",
              "sampleRepo": "https://github.com/redhat-developer/s2i-dotnetcore-ex.git",
              "supports": "dotnet",
              "tags": "builder,.net,dotnet,dotnetcore"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "2.0"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run .NET Core 2.0 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/redhat-developer/s2i-dotnetcore/tree/master/2.0/build/README.md.",
              "iconClass": "icon-dotnet",
              "openshift.io/display-name": ".NET Core 2.0",
              "sampleContextDir": "app",
              "sampleRef": "dotnetcore-2.0",
              "sampleRepo": "https://github.com/redhat-developer/s2i-dotnetcore-ex.git",
              "supports": "dotnet:2.0,dotnet",
              "tags": "builder,.net,dotnet,dotnetcore,rh-dotnet20",
              "version": "2.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.centos.org/dotnet/dotnet-20-centos7:latest"
            },
            "name": "2.0"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Apache HTTP Server (httpd)"
        },
        "name": "httpd"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and serve static content via Apache HTTP Server (httpd) on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/httpd-container/blob/master/2.4/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Httpd available on OpenShift, including major versions updates.",
              "iconClass": "icon-apache",
              "openshift.io/display-name": "Apache HTTP Server (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/httpd-ex.git",
              "supports": "httpd",
              "tags": "builder,httpd"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "2.4"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Apache HTTP Server (httpd) 2.4 on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/httpd-container/blob/master/2.4/README.md.",
              "iconClass": "icon-apache",
              "openshift.io/display-name": "Apache HTTP Server 2.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/httpd-ex.git",
              "supports": "httpd",
              "tags": "builder,httpd",
              "version": "2.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/httpd-24-centos7:latest"
            },
            "name": "2.4"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Jenkins"
        },
        "name": "jenkins"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a Jenkins server on CentOS 7. For more information about using this container image, including OpenShift considerations, see https://github.com/openshift/jenkins/blob/master/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Jenkins available on OpenShift, including major versions updates.",
              "iconClass": "icon-jenkins",
              "openshift.io/display-name": "Jenkins (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "jenkins"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "2"
            },
            "name": "latest",
            "referencePolicy": {
              "type": "Local"
            }
          },
          {
            "annotations": {
              "description": "Provides a Jenkins 1.X server on CentOS 7. For more information about using this container image, including OpenShift considerations, see https://github.com/openshift/jenkins/blob/master/README.md.",
              "iconClass": "icon-jenkins",
              "openshift.io/display-name": "Jenkins 1.X",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,jenkins",
              "version": "1.x"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/jenkins-1-centos7:latest"
            },
            "name": "1",
            "referencePolicy": {
              "type": "Local"
            }
          },
          {
            "annotations": {
              "description": "Provides a Jenkins v2.x server on CentOS 7. For more information about using this container image, including OpenShift considerations, see https://github.com/openshift/jenkins/blob/master/README.md.",
              "iconClass": "icon-jenkins",
              "openshift.io/display-name": "Jenkins 2.X",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "jenkins",
              "version": "2.x"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/jenkins-2-centos7:v3.10"
            },
            "name": "2",
            "referencePolicy": {
              "type": "Local"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "MariaDB"
        },
        "name": "mariadb"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a MariaDB database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/tree/master/10.2/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of MariaDB available on OpenShift, including major versions updates.",
              "iconClass": "icon-mariadb",
              "openshift.io/display-name": "MariaDB (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mariadb"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "10.2"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a MariaDB 10.1 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/tree/master/10.1/README.md.",
              "iconClass": "icon-mariadb",
              "openshift.io/display-name": "MariaDB 10.1",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mariadb",
              "version": "10.1"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/mariadb-101-centos7:latest"
            },
            "name": "10.1"
          },
          {
            "annotations": {
              "description": "Provides a MariaDB 10.2 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/tree/master/10.2/README.md.",
              "iconClass": "icon-mariadb",
              "openshift.io/display-name": "MariaDB 10.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mariadb",
              "version": "10.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/mariadb-102-centos7:latest"
            },
            "name": "10.2"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "MongoDB"
        },
        "name": "mongodb"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a MongoDB database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/3.4/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of MongoDB available on OpenShift, including major versions updates.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mongodb"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "3.4"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 2.4 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/2.4/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 2.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,mongodb",
              "version": "2.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/mongodb-24-centos7:latest"
            },
            "name": "2.4"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 2.6 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/2.6/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 2.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mongodb",
              "version": "2.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/mongodb-26-centos7:latest"
            },
            "name": "2.6"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 3.2 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/3.2/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 3.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mongodb",
              "version": "3.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/mongodb-32-centos7:latest"
            },
            "name": "3.2"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 3.4 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/3.4/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 3.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mongodb",
              "version": "3.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/mongodb-34-centos7:latest"
            },
            "name": "3.4"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "MySQL"
        },
        "name": "mysql"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a MySQL database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.6/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of MySQL available on OpenShift, including major versions updates.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "mysql"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "5.7"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a MySQL 5.5 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.5/README.md.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL 5.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,mysql",
              "version": "5.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/mysql-55-centos7:latest"
            },
            "name": "5.5"
          },
          {
            "annotations": {
              "description": "Provides a MySQL 5.6 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.6/README.md.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL 5.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "mysql",
              "version": "5.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/mysql-56-centos7:latest"
            },
            "name": "5.6"
          },
          {
            "annotations": {
              "description": "Provides a MySQL 5.7 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.7/README.md.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL 5.7",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "mysql",
              "version": "5.7"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/mysql-57-centos7:latest"
            },
            "name": "5.7"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Nginx HTTP server and a reverse proxy (nginx)"
        },
        "name": "nginx"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP Server and a reverse proxy (nginx) on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.8/README.md.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy 1.8",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx",
              "version": "1.8"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/nginx-18-centos7:latest"
            },
            "name": "1.8"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP Server and a reverse proxy (nginx) on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.10/README.md.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy 1.10",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx",
              "version": "1.10"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/nginx-110-centos7:latest"
            },
            "name": "1.10"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP Server and a reverse proxy (nginx) on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.12/README.md.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy 1.12",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx",
              "version": "1.12"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/nginx-112-centos7:latest"
            },
            "name": "1.12"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP Server and a reverse proxy (nginx) on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.12/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Nginx available on OpenShift, including major versions updates.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "1.12"
            },
            "name": "latest"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Node.js"
        },
        "name": "nodejs"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Node.js applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/8/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Node.js available on OpenShift, including major versions updates.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs",
              "tags": "builder,nodejs"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "8"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "DEPRECATED: Build and run Node.js 0.10 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/0.10/README.md.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 0.10",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs:0.10,nodejs:0.1,nodejs",
              "tags": "hidden,nodejs",
              "version": "0.10"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/nodejs-010-centos7:latest"
            },
            "name": "0.10"
          },
          {
            "annotations": {
              "description": "Build and run Node.js 4 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/4/README.md.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs:4,nodejs",
              "tags": "builder,nodejs",
              "version": "4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/nodejs-4-centos7:latest"
            },
            "name": "4"
          },
          {
            "annotations": {
              "description": "Build and run Node.js 6 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/6/README.md.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs:6,nodejs",
              "tags": "builder,nodejs",
              "version": "6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/nodejs-6-centos7:latest"
            },
            "name": "6"
          },
          {
            "annotations": {
              "description": "Build and run Node.js 8 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/8/README.md.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 8",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "tags": "builder,nodejs",
              "version": "8"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/nodejs-8-centos7:latest"
            },
            "name": "8"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Perl"
        },
        "name": "perl"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Perl applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.20/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Perl available on OpenShift, including major versions updates.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl",
              "tags": "builder,perl"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "5.24"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run Perl 5.16 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.16/README.md.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl 5.16",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl:5.16,perl",
              "tags": "hidden,builder,perl",
              "version": "5.16"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/perl-516-centos7:latest"
            },
            "name": "5.16"
          },
          {
            "annotations": {
              "description": "Build and run Perl 5.20 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.20/README.md.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl 5.20",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl:5.20,perl",
              "tags": "builder,perl",
              "version": "5.20"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/perl-520-centos7:latest"
            },
            "name": "5.20"
          },
          {
            "annotations": {
              "description": "Build and run Perl 5.24 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.24/README.md.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl 5.24",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl:5.24,perl",
              "tags": "builder,perl",
              "version": "5.24"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/perl-524-centos7:latest"
            },
            "name": "5.24"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "PHP"
        },
        "name": "php"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run PHP applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.1/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of PHP available on OpenShift, including major versions updates.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php",
              "tags": "builder,php"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "7.1"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run PHP 5.5 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/5.5/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 5.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:5.5,php",
              "tags": "hidden,builder,php",
              "version": "5.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/php-55-centos7:latest"
            },
            "name": "5.5"
          },
          {
            "annotations": {
              "description": "Build and run PHP 5.6 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/5.6/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 5.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:5.6,php",
              "tags": "builder,php",
              "version": "5.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/php-56-centos7:latest"
            },
            "name": "5.6"
          },
          {
            "annotations": {
              "description": "Build and run PHP 7.0 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.0/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 7.0",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:7.0,php",
              "tags": "builder,php",
              "version": "7.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/php-70-centos7:latest"
            },
            "name": "7.0"
          },
          {
            "annotations": {
              "description": "Build and run PHP 7.1 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.1/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 7.1",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:7.1,php",
              "tags": "builder,php",
              "version": "7.1"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/php-71-centos7:latest"
            },
            "name": "7.1"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "PostgreSQL"
        },
        "name": "postgresql"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a PostgreSQL database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.6/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of PostgreSQL available on OpenShift, including major versions updates.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "9.6"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.2 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.2/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL 9.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,postgresql",
              "version": "9.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/postgresql-92-centos7:latest"
            },
            "name": "9.2"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.4 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.4/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL 9.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql",
              "version": "9.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/postgresql-94-centos7:latest"
            },
            "name": "9.4"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.5 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.5/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL 9.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql",
              "version": "9.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/postgresql-95-centos7:latest"
            },
            "name": "9.5"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.6 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.6/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL 9.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql",
              "version": "9.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/postgresql-96-centos7:latest"
            },
            "name": "9.6"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Python"
        },
        "name": "python"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Python applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.6/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Python available on OpenShift, including major versions updates.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python",
              "tags": "builder,python"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "3.6"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.3 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.3/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.3",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.3,python",
              "tags": "hidden,builder,python",
              "version": "3.3"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/python-33-centos7:latest"
            },
            "name": "3.3"
          },
          {
            "annotations": {
              "description": "Build and run Python 2.7 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/2.7/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 2.7",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:2.7,python",
              "tags": "builder,python",
              "version": "2.7"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/python-27-centos7:latest"
            },
            "name": "2.7"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.4 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.4/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.4,python",
              "tags": "builder,python",
              "version": "3.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/python-34-centos7:latest"
            },
            "name": "3.4"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.5 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.5/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.5,python",
              "tags": "builder,python",
              "version": "3.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/python-35-centos7:latest"
            },
            "name": "3.5"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.6 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.6/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.6,python",
              "tags": "builder,python",
              "version": "3.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/python-36-centos7:latest"
            },
            "name": "3.6"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Redis"
        },
        "name": "redis"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a Redis database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/redis-container/tree/master/3.2/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Redis available on OpenShift, including major versions updates.",
              "iconClass": "icon-redis",
              "openshift.io/display-name": "Redis (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "redis"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "3.2"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a Redis 3.2 database on CentOS 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/redis-container/tree/master/3.2/README.md.",
              "iconClass": "icon-redis",
              "openshift.io/display-name": "Redis 3.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "redis",
              "version": "3.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/redis-32-centos7:latest"
            },
            "name": "3.2"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Ruby"
        },
        "name": "ruby"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Ruby applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/tree/master/2.3/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Ruby available on OpenShift, including major versions updates.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby",
              "tags": "builder,ruby"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "2.4"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.0 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/tree/master/2.0/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.0",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.0,ruby",
              "tags": "hidden,builder,ruby",
              "version": "2.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/ruby-20-centos7:latest"
            },
            "name": "2.0"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.2 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/tree/master/2.2/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.2,ruby",
              "tags": "builder,ruby",
              "version": "2.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/ruby-22-centos7:latest"
            },
            "name": "2.2"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.3 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/blob/master/2.3/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.3",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.3,ruby",
              "tags": "builder,ruby",
              "version": "2.3"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/ruby-23-centos7:latest"
            },
            "name": "2.3"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.4 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/blob/master/2.4/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.4,ruby",
              "tags": "builder,ruby",
              "version": "2.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/ruby-24-centos7:latest"
            },
            "name": "2.4"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "WildFly"
        },
        "name": "wildfly"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run WildFly applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/openshift-s2i/s2i-wildfly/blob/master/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of WildFly available on OpenShift, including major versions updates.",
              "iconClass": "icon-wildfly",
              "openshift.io/display-name": "WildFly (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/openshift-jee-sample.git",
              "supports": "jee,java",
              "tags": "builder,wildfly,java"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "12.0"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run WildFly 8.1 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/openshift-s2i/s2i-wildfly/blob/master/README.md.",
              "iconClass": "icon-wildfly",
              "openshift.io/display-name": "WildFly 8.1",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/openshift-jee-sample.git",
              "supports": "wildfly:8.1,jee,java",
              "tags": "builder,wildfly,java",
              "version": "8.1"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/wildfly-81-centos7:latest"
            },
            "name": "8.1"
          },
          {
            "annotations": {
              "description": "Build and run WildFly 9.0 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/openshift-s2i/s2i-wildfly/blob/master/README.md.",
              "iconClass": "icon-wildfly",
              "openshift.io/display-name": "WildFly 9.0",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/openshift-jee-sample.git",
              "supports": "wildfly:9.0,jee,java",
              "tags": "builder,wildfly,java",
              "version": "9.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/wildfly-90-centos7:latest"
            },
            "name": "9.0"
          },
          {
            "annotations": {
              "description": "Build and run WildFly 10.0 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/openshift-s2i/s2i-wildfly/blob/master/README.md.",
              "iconClass": "icon-wildfly",
              "openshift.io/display-name": "WildFly 10.0",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/openshift-jee-sample.git",
              "supports": "wildfly:10.0,jee,java",
              "tags": "builder,wildfly,java",
              "version": "10.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/wildfly-100-centos7:latest"
            },
            "name": "10.0"
          },
          {
            "annotations": {
              "description": "Build and run WildFly 10.1 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/openshift-s2i/s2i-wildfly/blob/master/README.md.",
              "iconClass": "icon-wildfly",
              "openshift.io/display-name": "WildFly 10.1",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/openshift-jee-sample.git",
              "supports": "wildfly:10.1,jee,java",
              "tags": "builder,wildfly,java",
              "version": "10.1"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/wildfly-101-centos7:latest"
            },
            "name": "10.1"
          },
          {
            "annotations": {
              "description": "Build and run WildFly 11 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/openshift-s2i/s2i-wildfly/blob/master/README.md.",
              "iconClass": "icon-wildfly",
              "openshift.io/display-name": "WildFly 11",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/openshift-jee-sample.git",
              "supports": "wildfly:11,jee,java",
              "tags": "builder,wildfly,java",
              "version": "11.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/wildfly-110-centos7:latest"
            },
            "name": "11.0"
          },
          {
            "annotations": {
              "description": "Build and run WildFly 12 applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/openshift-s2i/s2i-wildfly/blob/master/README.md.",
              "iconClass": "icon-wildfly",
              "openshift.io/display-name": "WildFly 12",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/openshift-jee-sample.git",
              "supports": "wildfly:12,jee,java",
              "tags": "builder,wildfly,java",
              "version": "12.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/openshift/wildfly-120-centos7:latest"
            },
            "name": "12.0"
          }
        ]
      }
    }
  ]
}
`)

func examplesImageStreamsImageStreamsCentos7JsonBytes() ([]byte, error) {
	return _examplesImageStreamsImageStreamsCentos7Json, nil
}

func examplesImageStreamsImageStreamsCentos7Json() (*asset, error) {
	bytes, err := examplesImageStreamsImageStreamsCentos7JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/image-streams/image-streams-centos7.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesImageStreamsImageStreamsRhel7Json = []byte(`{
  "kind": "ImageStreamList",
  "apiVersion": "v1",
  "items": [
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Apache HTTP Server (httpd)"
        },
        "name": "httpd"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and serve static content via Apache HTTP Server (httpd) on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/httpd-container/blob/master/2.4/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Httpd available on OpenShift, including major versions updates.",
              "iconClass": "icon-apache",
              "openshift.io/display-name": "Apache HTTP Server (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/httpd-ex.git",
              "supports": "httpd",
              "tags": "builder,httpd"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "2.4"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Apache HTTP Server (httpd) 2.4 on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/httpd-container/blob/master/2.4/README.md.",
              "iconClass": "icon-apache",
              "openshift.io/display-name": "Apache HTTP Server 2.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/httpd-ex.git",
              "supports": "httpd",
              "tags": "builder,httpd",
              "version": "2.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/httpd-24-rhel7"
            },
            "name": "2.4"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Jenkins"
        },
        "name": "jenkins"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a Jenkins server on RHEL 7. For more information about using this container image, including OpenShift considerations, see https://github.com/openshift/jenkins/blob/master/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Jenkins available on OpenShift, including major versions updates.",
              "iconClass": "icon-jenkins",
              "openshift.io/display-name": "Jenkins (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "jenkins"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "2"
            },
            "name": "latest",
            "referencePolicy": {
              "type": "Local"
            }
          },
          {
            "annotations": {
              "description": "Provides a Jenkins 1.X server on RHEL 7. For more information about using this container image, including OpenShift considerations, see https://github.com/openshift/jenkins/blob/master/README.md.",
              "iconClass": "icon-jenkins",
              "openshift.io/display-name": "Jenkins 1.X",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,jenkins",
              "version": "1.x"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/jenkins-1-rhel7:latest"
            },
            "name": "1",
            "referencePolicy": {
              "type": "Local"
            }
          },
          {
            "annotations": {
              "description": "Provides a Jenkins 2.X server on RHEL 7. For more information about using this container image, including OpenShift considerations, see https://github.com/openshift/jenkins/blob/master/README.md.",
              "iconClass": "icon-jenkins",
              "openshift.io/display-name": "Jenkins 2.X",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "jenkins",
              "version": "2.x"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/jenkins-2-rhel7:v3.10"
            },
            "name": "2",
            "referencePolicy": {
              "type": "Local"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "MariaDB"
        },
        "name": "mariadb"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a MariaDB database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/tree/master/10.2/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of MariaDB available on OpenShift, including major versions updates.",
              "iconClass": "icon-mariadb",
              "openshift.io/display-name": "MariaDB (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mariadb"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "10.2"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a MariaDB 10.1 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/tree/master/10.1/README.md.",
              "iconClass": "icon-mariadb",
              "openshift.io/display-name": "MariaDB 10.1",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mariadb",
              "version": "10.1"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/mariadb-101-rhel7:latest"
            },
            "name": "10.1"
          },
          {
            "annotations": {
              "description": "Provides a MariaDB 10.2 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/tree/master/10.2/README.md.",
              "iconClass": "icon-mariadb",
              "openshift.io/display-name": "MariaDB 10.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mariadb",
              "version": "10.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/mariadb-102-rhel7:latest"
            },
            "name": "10.2"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "MongoDB"
        },
        "name": "mongodb"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a MongoDB database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/3.4/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of MongoDB available on OpenShift, including major versions updates.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "mongodb"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "3.4"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 2.4 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/2.4/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 2.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,mongodb",
              "version": "2.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/mongodb-24-rhel7:latest"
            },
            "name": "2.4"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 2.6 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/2.6/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 2.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mongodb",
              "version": "2.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/mongodb-26-rhel7:latest"
            },
            "name": "2.6"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 3.2 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/3.2/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 3.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mongodb",
              "version": "3.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/mongodb-32-rhel7:latest"
            },
            "name": "3.2"
          },
          {
            "annotations": {
              "description": "Provides a MongoDB 3.4 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/tree/master/3.4/README.md.",
              "iconClass": "icon-mongodb",
              "openshift.io/display-name": "MongoDB 3.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,mongodb",
              "version": "3.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/mongodb-34-rhel7:latest"
            },
            "name": "3.4"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "MySQL"
        },
        "name": "mysql"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a MySQL database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.6/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of MySQL available on OpenShift, including major versions updates.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "mysql"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "5.7"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a MySQL 5.5 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.5/README.md.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL 5.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,mysql",
              "version": "5.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/mysql-55-rhel7:latest"
            },
            "name": "5.5"
          },
          {
            "annotations": {
              "description": "Provides a MySQL 5.6 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.6/README.md.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL 5.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "mysql",
              "version": "5.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/mysql-56-rhel7:latest"
            },
            "name": "5.6"
          },
          {
            "annotations": {
              "description": "Provides a MySQL 5.7 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/mysql-container/tree/master/5.7/README.md.",
              "iconClass": "icon-mysql-database",
              "openshift.io/display-name": "MySQL 5.7",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "mysql",
              "version": "5.7"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/mysql-57-rhel7:latest"
            },
            "name": "5.7"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Nginx HTTP server and a reverse proxy (nginx)"
        },
        "name": "nginx"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP server and a reverse proxy (nginx) on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.8/README.md.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy 1.8",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx",
              "version": "1.8"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/nginx-18-rhel7:latest"
            },
            "name": "1.8"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP server and a reverse proxy (nginx) on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.10/README.md.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy 1.10",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx",
              "version": "1.10"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/nginx-110-rhel7:latest"
            },
            "name": "1.10"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP server and a reverse proxy (nginx) on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.12/README.md.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy 1.12",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx",
              "version": "1.12"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/nginx-112-rhel7:latest"
            },
            "name": "1.12"
          },
          {
            "annotations": {
              "description": "Build and serve static content via Nginx HTTP server and a reverse proxy (nginx) on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/nginx-container/blob/master/1.12/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Nginx available on OpenShift, including major versions updates.",
              "iconClass": "icon-nginx",
              "openshift.io/display-name": "Nginx HTTP server and a reverse proxy (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/sclorg/nginx-ex.git",
              "supports": "nginx",
              "tags": "builder,nginx"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "1.12"
            },
            "name": "latest"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Node.js"
        },
        "name": "nodejs"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Node.js applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/8/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Node.js available on OpenShift, including major versions updates.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs",
              "tags": "builder,nodejs"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "8"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "DEPRECATED: Build and run Node.js 0.10 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/0.10/README.md.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 0.10",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs:0.10,nodejs:0.1,nodejs",
              "tags": "hidden,nodejs",
              "version": "0.10"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/nodejs-010-rhel7:latest"
            },
            "name": "0.10"
          },
          {
            "annotations": {
              "description": "Build and run Node.js 4 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container/blob/master/4/README.md.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs:4,nodejs",
              "tags": "builder,nodejs",
              "version": "4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/nodejs-4-rhel7:latest"
            },
            "name": "4"
          },
          {
            "annotations": {
              "description": "Build and run Node.js 6 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "supports": "nodejs:6,nodejs",
              "tags": "builder,nodejs",
              "version": "6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/nodejs-6-rhel7:latest"
            },
            "name": "6"
          },
          {
            "annotations": {
              "description": "Build and run Node.js 8 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-nodejs-container.",
              "iconClass": "icon-nodejs",
              "openshift.io/display-name": "Node.js 8",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/nodejs-ex.git",
              "tags": "builder,nodejs",
              "version": "8"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/nodejs-8-rhel7:latest"
            },
            "name": "8"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Perl"
        },
        "name": "perl"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Perl applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.20/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Perl available on OpenShift, including major versions updates.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl",
              "tags": "builder,perl"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "5.24"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run Perl 5.16 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.16/README.md.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl 5.16",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl:5.16,perl",
              "tags": "hidden,builder,perl",
              "version": "5.16"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/perl-516-rhel7:latest"
            },
            "name": "5.16"
          },
          {
            "annotations": {
              "description": "Build and run Perl 5.20 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.20/README.md.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl 5.20",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl:5.20,perl",
              "tags": "builder,perl",
              "version": "5.20"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/perl-520-rhel7:latest"
            },
            "name": "5.20"
          },
          {
            "annotations": {
              "description": "Build and run Perl 5.24 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-perl-container/blob/master/5.24/README.md.",
              "iconClass": "icon-perl",
              "openshift.io/display-name": "Perl 5.24",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/dancer-ex.git",
              "supports": "perl:5.24,perl",
              "tags": "builder,perl",
              "version": "5.24"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/perl-524-rhel7:latest"
            },
            "name": "5.24"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "PHP"
        },
        "name": "php"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run PHP applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.1/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of PHP available on OpenShift, including major versions updates.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php",
              "tags": "builder,php"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "7.1"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run PHP 5.5 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/5.5/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 5.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:5.5,php",
              "tags": "hidden,builder,php",
              "version": "5.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/php-55-rhel7:latest"
            },
            "name": "5.5"
          },
          {
            "annotations": {
              "description": "Build and run PHP 5.6 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/5.6/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 5.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:5.6,php",
              "tags": "builder,php",
              "version": "5.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/php-56-rhel7:latest"
            },
            "name": "5.6"
          },
          {
            "annotations": {
              "description": "Build and run PHP 7.0 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.0/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 7.0",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:7.0,php",
              "tags": "builder,php",
              "version": "7.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/php-70-rhel7:latest"
            },
            "name": "7.0"
          },
          {
            "annotations": {
              "description": "Build and run PHP 7.1 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.1/README.md.",
              "iconClass": "icon-php",
              "openshift.io/display-name": "PHP 7.1",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/cakephp-ex.git",
              "supports": "php:7.1,php",
              "tags": "builder,php",
              "version": "7.1"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/php-71-rhel7:latest"
            },
            "name": "7.1"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "PostgreSQL"
        },
        "name": "postgresql"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a PostgreSQL database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.6/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of PostgreSQL available on OpenShift, including major versions updates.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "9.6"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.2 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.2/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL 9.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "hidden,postgresql",
              "version": "9.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/postgresql-92-rhel7:latest"
            },
            "name": "9.2"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.4 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.4/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL 9.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql",
              "version": "9.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/postgresql-94-rhel7:latest"
            },
            "name": "9.4"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.5 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.5/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL 9.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql",
              "version": "9.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/postgresql-95-rhel7:latest"
            },
            "name": "9.5"
          },
          {
            "annotations": {
              "description": "Provides a PostgreSQL 9.6 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/tree/master/9.6/README.md.",
              "iconClass": "icon-postgresql",
              "openshift.io/display-name": "PostgreSQL (Ephemeral) 9.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "database,postgresql",
              "version": "9.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/postgresql-96-rhel7:latest"
            },
            "name": "9.6"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Python"
        },
        "name": "python"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Python applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.6/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Python available on OpenShift, including major versions updates.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python",
              "tags": "builder,python"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "3.6"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.3 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.3/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.3",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.3,python",
              "tags": "hidden,builder,python",
              "version": "3.3"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/python-33-rhel7:latest"
            },
            "name": "3.3"
          },
          {
            "annotations": {
              "description": "Build and run Python 2.7 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/2.7/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 2.7",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:2.7,python",
              "tags": "builder,python",
              "version": "2.7"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/python-27-rhel7:latest"
            },
            "name": "2.7"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.4 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.4/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.4,python",
              "tags": "builder,python",
              "version": "3.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/python-34-rhel7:latest"
            },
            "name": "3.4"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.5 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.5/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.5",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.5,python",
              "tags": "builder,python",
              "version": "3.5"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/python-35-rhel7:latest"
            },
            "name": "3.5"
          },
          {
            "annotations": {
              "description": "Build and run Python 3.6 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-python-container/blob/master/3.6/README.md.",
              "iconClass": "icon-python",
              "openshift.io/display-name": "Python 3.6",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/django-ex.git",
              "supports": "python:3.6,python",
              "tags": "builder,python",
              "version": "3.6"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/python-36-rhel7:latest"
            },
            "name": "3.6"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Redis"
        },
        "name": "redis"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Provides a Redis database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/redis-container/tree/master/3.2/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Redis available on OpenShift, including major versions updates.",
              "iconClass": "icon-redis",
              "openshift.io/display-name": "Redis (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "redis"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "3.2"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Provides a Redis 3.2 database on RHEL 7. For more information about using this database image, including OpenShift considerations, see https://github.com/sclorg/redis-container/tree/master/3.2/README.md.",
              "iconClass": "icon-redis",
              "openshift.io/display-name": "Redis 3.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "tags": "redis",
              "version": "3.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/redis-32-rhel7:latest"
            },
            "name": "3.2"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ImageStream",
      "metadata": {
        "annotations": {
          "openshift.io/display-name": "Ruby"
        },
        "name": "ruby"
      },
      "spec": {
        "tags": [
          {
            "annotations": {
              "description": "Build and run Ruby applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/tree/master/2.3/README.md.\n\nWARNING: By selecting this tag, your application will automatically update to use the latest version of Ruby available on OpenShift, including major versions updates.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby (Latest)",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby",
              "tags": "builder,ruby"
            },
            "from": {
              "kind": "ImageStreamTag",
              "name": "2.4"
            },
            "name": "latest"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.0 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/tree/master/2.0/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.0",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.0,ruby",
              "tags": "hidden,builder,ruby",
              "version": "2.0"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/openshift3/ruby-20-rhel7:latest"
            },
            "name": "2.0"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.2 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/tree/master/2.2/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.2",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.2,ruby",
              "tags": "builder,ruby",
              "version": "2.2"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/ruby-22-rhel7:latest"
            },
            "name": "2.2"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.3 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/blob/master/2.3/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.3",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.3,ruby",
              "tags": "builder,ruby",
              "version": "2.3"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/ruby-23-rhel7:latest"
            },
            "name": "2.3"
          },
          {
            "annotations": {
              "description": "Build and run Ruby 2.4 applications on RHEL 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-ruby-container/blob/master/2.4/README.md.",
              "iconClass": "icon-ruby",
              "openshift.io/display-name": "Ruby 2.4",
              "openshift.io/provider-display-name": "Red Hat, Inc.",
              "sampleRepo": "https://github.com/openshift/ruby-ex.git",
              "supports": "ruby:2.4,ruby",
              "tags": "builder,ruby",
              "version": "2.4"
            },
            "from": {
              "kind": "DockerImage",
              "name": "registry.access.redhat.com/rhscl/ruby-24-rhel7:latest"
            },
            "name": "2.4"
          }
        ]
      }
    }
  ]
}
`)

func examplesImageStreamsImageStreamsRhel7JsonBytes() ([]byte, error) {
	return _examplesImageStreamsImageStreamsRhel7Json, nil
}

func examplesImageStreamsImageStreamsRhel7Json() (*asset, error) {
	bytes, err := examplesImageStreamsImageStreamsRhel7JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/image-streams/image-streams-rhel7.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesMariadbEphemeralTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "mariadb-ephemeral-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md.",
    "metadata": {
        "annotations": {
            "description": "MariaDB database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
            "iconClass": "icon-mariadb",
            "openshift.io/display-name": "MariaDB (Ephemeral)",
            "openshift.io/documentation-url": "https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md",
            "openshift.io/long-description": "This template provides a standalone MariaDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,mariadb"
        },
        "name": "mariadb-ephemeral"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-name": "${MYSQL_DATABASE}",
                "database-password": "${MYSQL_PASSWORD}",
                "database-root-password": "${MYSQL_ROOT_PASSWORD}",
                "database-user": "${MYSQL_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mariadb\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mariadb",
                        "port": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_ROOT_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-root-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mariadb",
                                "ports": [
                                    {
                                        "containerPort": 3306
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": ""
                                },
                                "name": "${DATABASE_SERVICE_NAME}-data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mariadb"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mariadb:${MARIADB_VERSION}",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mariadb"
        },
        {
            "description": "Username for MariaDB user that will be used for accessing the database.",
            "displayName": "MariaDB Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "MYSQL_USER",
            "required": true
        },
        {
            "description": "Password for the MariaDB connection user.",
            "displayName": "MariaDB Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_PASSWORD",
            "required": true
        },
        {
            "description": "Password for the MariaDB root user.",
            "displayName": "MariaDB root Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_ROOT_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the MariaDB database accessed.",
            "displayName": "MariaDB Database Name",
            "name": "MYSQL_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Version of MariaDB image to be used (10.1, 10.2 or latest).",
            "displayName": "Version of MariaDB Image",
            "name": "MARIADB_VERSION",
            "required": true,
            "value": "10.2"
        }
    ]
}`)

func examplesDbTemplatesMariadbEphemeralTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesMariadbEphemeralTemplateJson, nil
}

func examplesDbTemplatesMariadbEphemeralTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesMariadbEphemeralTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/mariadb-ephemeral-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesMariadbPersistentTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "mariadb-persistent-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md.",
    "metadata": {
        "annotations": {
            "description": "MariaDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
            "iconClass": "icon-mariadb",
            "openshift.io/display-name": "MariaDB",
            "openshift.io/documentation-url": "https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md",
            "openshift.io/long-description": "This template provides a standalone MariaDB server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,mariadb"
        },
        "name": "mariadb-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-name": "${MYSQL_DATABASE}",
                "database-password": "${MYSQL_PASSWORD}",
                "database-root-password": "${MYSQL_ROOT_PASSWORD}",
                "database-user": "${MYSQL_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mariadb\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mariadb",
                        "port": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_ROOT_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-root-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mariadb",
                                "ports": [
                                    {
                                        "containerPort": 3306
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mariadb"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mariadb:${MARIADB_VERSION}",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mariadb"
        },
        {
            "description": "Username for MariaDB user that will be used for accessing the database.",
            "displayName": "MariaDB Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "MYSQL_USER",
            "required": true
        },
        {
            "description": "Password for the MariaDB connection user.",
            "displayName": "MariaDB Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_PASSWORD",
            "required": true
        },
        {
            "description": "Password for the MariaDB root user.",
            "displayName": "MariaDB root Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_ROOT_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the MariaDB database accessed.",
            "displayName": "MariaDB Database Name",
            "name": "MYSQL_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Version of MariaDB image to be used (10.1, 10.2 or latest).",
            "displayName": "Version of MariaDB Image",
            "name": "MARIADB_VERSION",
            "required": true,
            "value": "10.2"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        }
    ]
}`)

func examplesDbTemplatesMariadbPersistentTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesMariadbPersistentTemplateJson, nil
}

func examplesDbTemplatesMariadbPersistentTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesMariadbPersistentTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/mariadb-persistent-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesMongodbEphemeralTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "mongodb-ephemeral-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MONGODB_USER}\n       Password: ${MONGODB_PASSWORD}\n  Database Name: ${MONGODB_DATABASE}\n Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${DATABASE_SERVICE_NAME}/${MONGODB_DATABASE}\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.",
    "metadata": {
        "annotations": {
            "description": "MongoDB database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
            "iconClass": "icon-mongodb",
            "openshift.io/display-name": "MongoDB (Ephemeral)",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mongodb.html",
            "openshift.io/long-description": "This template provides a standalone MongoDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,mongodb"
        },
        "name": "mongodb-ephemeral"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-admin_password": "{.data['database-admin-password']}",
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-admin-password": "${MONGODB_ADMIN_PASSWORD}",
                "database-name": "${MONGODB_DATABASE}",
                "database-password": "${MONGODB_PASSWORD}",
                "database-user": "${MONGODB_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "mongodb://{.spec.clusterIP}:{.spec.ports[?(.name==\"mongo\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mongo",
                        "nodePort": 0,
                        "port": 27017,
                        "protocol": "TCP",
                        "targetPort": 27017
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "MONGODB_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_ADMIN_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-admin-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 27017
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mongodb",
                                "ports": [
                                    {
                                        "containerPort": 27017,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                                        ]
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mongodb/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": ""
                                },
                                "name": "${DATABASE_SERVICE_NAME}-data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mongodb"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mongodb:${MONGODB_VERSION}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            },
            "status": {}
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mongodb"
        },
        {
            "description": "Username for MongoDB user that will be used for accessing the database.",
            "displayName": "MongoDB Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "MONGODB_USER",
            "required": true
        },
        {
            "description": "Password for the MongoDB connection user.",
            "displayName": "MongoDB Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MONGODB_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the MongoDB database accessed.",
            "displayName": "MongoDB Database Name",
            "name": "MONGODB_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Password for the database admin user.",
            "displayName": "MongoDB Admin Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MONGODB_ADMIN_PASSWORD",
            "required": true
        },
        {
            "description": "Version of MongoDB image to be used (2.4, 2.6, 3.2 or latest).",
            "displayName": "Version of MongoDB Image",
            "name": "MONGODB_VERSION",
            "required": true,
            "value": "3.2"
        }
    ]
}`)

func examplesDbTemplatesMongodbEphemeralTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesMongodbEphemeralTemplateJson, nil
}

func examplesDbTemplatesMongodbEphemeralTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesMongodbEphemeralTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/mongodb-ephemeral-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesMongodbPersistentTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "mongodb-persistent-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MONGODB_USER}\n       Password: ${MONGODB_PASSWORD}\n  Database Name: ${MONGODB_DATABASE}\n Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${DATABASE_SERVICE_NAME}/${MONGODB_DATABASE}\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.",
    "metadata": {
        "annotations": {
            "description": "MongoDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
            "iconClass": "icon-mongodb",
            "openshift.io/display-name": "MongoDB",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mongodb.html",
            "openshift.io/long-description": "This template provides a standalone MongoDB server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,mongodb"
        },
        "name": "mongodb-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-admin_password": "{.data['database-admin-password']}",
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-admin-password": "${MONGODB_ADMIN_PASSWORD}",
                "database-name": "${MONGODB_DATABASE}",
                "database-password": "${MONGODB_PASSWORD}",
                "database-user": "${MONGODB_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "mongodb://{.spec.clusterIP}:{.spec.ports[?(.name==\"mongo\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mongo",
                        "nodePort": 0,
                        "port": 27017,
                        "protocol": "TCP",
                        "targetPort": 27017
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "MONGODB_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_ADMIN_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-admin-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 27017
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mongodb",
                                "ports": [
                                    {
                                        "containerPort": 27017,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                                        ]
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mongodb/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mongodb"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mongodb:${MONGODB_VERSION}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            },
            "status": {}
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mongodb"
        },
        {
            "description": "Username for MongoDB user that will be used for accessing the database.",
            "displayName": "MongoDB Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "MONGODB_USER",
            "required": true
        },
        {
            "description": "Password for the MongoDB connection user.",
            "displayName": "MongoDB Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MONGODB_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the MongoDB database accessed.",
            "displayName": "MongoDB Database Name",
            "name": "MONGODB_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Password for the database admin user.",
            "displayName": "MongoDB Admin Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MONGODB_ADMIN_PASSWORD",
            "required": true
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "Version of MongoDB image to be used (2.4, 2.6, 3.2 or latest).",
            "displayName": "Version of MongoDB Image",
            "name": "MONGODB_VERSION",
            "required": true,
            "value": "3.2"
        }
    ]
}`)

func examplesDbTemplatesMongodbPersistentTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesMongodbPersistentTemplateJson, nil
}

func examplesDbTemplatesMongodbPersistentTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesMongodbPersistentTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/mongodb-persistent-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesMysqlEphemeralTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "mysql-ephemeral-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/root/usr/share/container-scripts/mysql/README.md.",
    "metadata": {
        "annotations": {
            "description": "MySQL database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/root/usr/share/container-scripts/mysql/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
            "iconClass": "icon-mysql-database",
            "openshift.io/display-name": "MySQL (Ephemeral)",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mysql.html",
            "openshift.io/long-description": "This template provides a standalone MySQL server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,mysql"
        },
        "name": "mysql-ephemeral"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-name": "${MYSQL_DATABASE}",
                "database-password": "${MYSQL_PASSWORD}",
                "database-root-password": "${MYSQL_ROOT_PASSWORD}",
                "database-user": "${MYSQL_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mysql\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mysql",
                        "nodePort": 0,
                        "port": 3306,
                        "protocol": "TCP",
                        "targetPort": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_ROOT_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-root-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mysql",
                                "ports": [
                                    {
                                        "containerPort": 3306,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": ""
                                },
                                "name": "${DATABASE_SERVICE_NAME}-data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mysql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mysql:${MYSQL_VERSION}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            },
            "status": {}
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mysql"
        },
        {
            "description": "Username for MySQL user that will be used for accessing the database.",
            "displayName": "MySQL Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "MYSQL_USER",
            "required": true
        },
        {
            "description": "Password for the MySQL connection user.",
            "displayName": "MySQL Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_PASSWORD",
            "required": true
        },
        {
            "description": "Password for the MySQL root user.",
            "displayName": "MySQL root user Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_ROOT_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the MySQL database accessed.",
            "displayName": "MySQL Database Name",
            "name": "MYSQL_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Version of MySQL image to be used (5.5, 5.6, 5.7, or latest).",
            "displayName": "Version of MySQL Image",
            "name": "MYSQL_VERSION",
            "required": true,
            "value": "5.7"
        }
    ]
}`)

func examplesDbTemplatesMysqlEphemeralTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesMysqlEphemeralTemplateJson, nil
}

func examplesDbTemplatesMysqlEphemeralTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesMysqlEphemeralTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/mysql-ephemeral-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesMysqlPersistentTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "mysql-persistent-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/root/usr/share/container-scripts/mysql/README.md.",
    "metadata": {
        "annotations": {
            "description": "MySQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/root/usr/share/container-scripts/mysql/README.md.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
            "iconClass": "icon-mysql-database",
            "openshift.io/display-name": "MySQL",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mysql.html",
            "openshift.io/long-description": "This template provides a standalone MySQL server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,mysql"
        },
        "name": "mysql-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-name": "${MYSQL_DATABASE}",
                "database-password": "${MYSQL_PASSWORD}",
                "database-root-password": "${MYSQL_ROOT_PASSWORD}",
                "database-user": "${MYSQL_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mysql\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mysql",
                        "port": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_ROOT_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-root-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mysql",
                                "ports": [
                                    {
                                        "containerPort": 3306
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mysql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mysql:${MYSQL_VERSION}",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mysql"
        },
        {
            "description": "Username for MySQL user that will be used for accessing the database.",
            "displayName": "MySQL Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "MYSQL_USER",
            "required": true
        },
        {
            "description": "Password for the MySQL connection user.",
            "displayName": "MySQL Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_PASSWORD",
            "required": true
        },
        {
            "description": "Password for the MySQL root user.",
            "displayName": "MySQL root user Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "MYSQL_ROOT_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the MySQL database accessed.",
            "displayName": "MySQL Database Name",
            "name": "MYSQL_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "Version of MySQL image to be used (5.5, 5.6, 5.7, or latest).",
            "displayName": "Version of MySQL Image",
            "name": "MYSQL_VERSION",
            "required": true,
            "value": "5.7"
        }
    ]
}`)

func examplesDbTemplatesMysqlPersistentTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesMysqlPersistentTemplateJson, nil
}

func examplesDbTemplatesMysqlPersistentTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesMysqlPersistentTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/mysql-persistent-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesPostgresqlEphemeralTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "postgresql-ephemeral-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${POSTGRESQL_USER}\n       Password: ${POSTGRESQL_PASSWORD}\n  Database Name: ${POSTGRESQL_DATABASE}\n Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.",
    "metadata": {
        "annotations": {
            "description": "PostgreSQL database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
            "iconClass": "icon-postgresql",
            "openshift.io/display-name": "PostgreSQL (Ephemeral)",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/postgresql.html",
            "openshift.io/long-description": "This template provides a standalone PostgreSQL server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,postgresql"
        },
        "name": "postgresql-ephemeral"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-name": "${POSTGRESQL_DATABASE}",
                "database-password": "${POSTGRESQL_PASSWORD}",
                "database-user": "${POSTGRESQL_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "postgres://{.spec.clusterIP}:{.spec.ports[?(.name==\"postgresql\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "postgresql",
                        "nodePort": 0,
                        "port": 5432,
                        "protocol": "TCP",
                        "targetPort": 5432
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container",
                                            "--live"
                                        ]
                                    },
                                    "initialDelaySeconds": 120,
                                    "timeoutSeconds": 10
                                },
                                "name": "postgresql",
                                "ports": [
                                    {
                                        "containerPort": 5432,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/pgsql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": ""
                                },
                                "name": "${DATABASE_SERVICE_NAME}-data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "postgresql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "postgresql:${POSTGRESQL_VERSION}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            },
            "status": {}
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "postgresql"
        },
        {
            "description": "Username for PostgreSQL user that will be used for accessing the database.",
            "displayName": "PostgreSQL Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "POSTGRESQL_USER",
            "required": true
        },
        {
            "description": "Password for the PostgreSQL connection user.",
            "displayName": "PostgreSQL Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "POSTGRESQL_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the PostgreSQL database accessed.",
            "displayName": "PostgreSQL Database Name",
            "name": "POSTGRESQL_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Version of PostgreSQL image to be used (9.4, 9.5, 9.6 or latest).",
            "displayName": "Version of PostgreSQL Image",
            "name": "POSTGRESQL_VERSION",
            "required": true,
            "value": "9.6"
        }
    ]
}`)

func examplesDbTemplatesPostgresqlEphemeralTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesPostgresqlEphemeralTemplateJson, nil
}

func examplesDbTemplatesPostgresqlEphemeralTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesPostgresqlEphemeralTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/postgresql-ephemeral-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesPostgresqlPersistentTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "postgresql-persistent-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${POSTGRESQL_USER}\n       Password: ${POSTGRESQL_PASSWORD}\n  Database Name: ${POSTGRESQL_DATABASE}\n Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.",
    "metadata": {
        "annotations": {
            "description": "PostgreSQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
            "iconClass": "icon-postgresql",
            "openshift.io/display-name": "PostgreSQL",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/postgresql.html",
            "openshift.io/long-description": "This template provides a standalone PostgreSQL server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,postgresql"
        },
        "name": "postgresql-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-database_name": "{.data['database-name']}",
                    "template.openshift.io/expose-password": "{.data['database-password']}",
                    "template.openshift.io/expose-username": "{.data['database-user']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-name": "${POSTGRESQL_DATABASE}",
                "database-password": "${POSTGRESQL_PASSWORD}",
                "database-user": "${POSTGRESQL_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "postgres://{.spec.clusterIP}:{.spec.ports[?(.name==\"postgresql\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "postgresql",
                        "nodePort": 0,
                        "port": 5432,
                        "protocol": "TCP",
                        "targetPort": 5432
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-name",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container",
                                            "--live"
                                        ]
                                    },
                                    "initialDelaySeconds": 120,
                                    "timeoutSeconds": 10
                                },
                                "name": "postgresql",
                                "ports": [
                                    {
                                        "containerPort": 5432,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/pgsql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "postgresql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "postgresql:${POSTGRESQL_VERSION}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            },
            "status": {}
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "postgresql"
        },
        {
            "description": "Username for PostgreSQL user that will be used for accessing the database.",
            "displayName": "PostgreSQL Connection Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "POSTGRESQL_USER",
            "required": true
        },
        {
            "description": "Password for the PostgreSQL connection user.",
            "displayName": "PostgreSQL Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "POSTGRESQL_PASSWORD",
            "required": true
        },
        {
            "description": "Name of the PostgreSQL database accessed.",
            "displayName": "PostgreSQL Database Name",
            "name": "POSTGRESQL_DATABASE",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "Version of PostgreSQL image to be used (9.4, 9.5, 9.6 or latest).",
            "displayName": "Version of PostgreSQL Image",
            "name": "POSTGRESQL_VERSION",
            "required": true,
            "value": "9.6"
        }
    ]
}`)

func examplesDbTemplatesPostgresqlPersistentTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesPostgresqlPersistentTemplateJson, nil
}

func examplesDbTemplatesPostgresqlPersistentTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesPostgresqlPersistentTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/postgresql-persistent-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesRedisEphemeralTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "redis-ephemeral-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Password: ${REDIS_PASSWORD}\n Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.",
    "metadata": {
        "annotations": {
            "description": "Redis in-memory data structure store, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
            "iconClass": "icon-redis",
            "openshift.io/display-name": "Redis (Ephemeral)",
            "openshift.io/documentation-url": "https://github.com/sclorg/redis-container/tree/master/3.2",
            "openshift.io/long-description": "This template provides a standalone Redis server.  The data is not stored on persistent storage, so any restart of the service will result in all data being lost.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,redis"
        },
        "name": "redis-ephemeral"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-password": "{.data['database-password']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-password": "${REDIS_PASSWORD}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "redis://{.spec.clusterIP}:{.spec.ports[?(.name==\"redis\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "redis",
                        "nodePort": 0,
                        "port": 6379,
                        "protocol": "TCP",
                        "targetPort": 6379
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "REDIS_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 6379
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "redis",
                                "ports": [
                                    {
                                        "containerPort": 6379,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "test \"$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)\" == \"PONG\""
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/redis/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": ""
                                },
                                "name": "${DATABASE_SERVICE_NAME}-data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "redis"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "redis:${REDIS_VERSION}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            },
            "status": {}
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "redis"
        },
        {
            "description": "Password for the Redis connection user.",
            "displayName": "Redis Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "REDIS_PASSWORD",
            "required": true
        },
        {
            "description": "Version of Redis image to be used (3.2 or latest).",
            "displayName": "Version of Redis Image",
            "name": "REDIS_VERSION",
            "required": true,
            "value": "3.2"
        }
    ]
}`)

func examplesDbTemplatesRedisEphemeralTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesRedisEphemeralTemplateJson, nil
}

func examplesDbTemplatesRedisEphemeralTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesRedisEphemeralTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/redis-ephemeral-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesDbTemplatesRedisPersistentTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "redis-persistent-template"
    },
    "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Password: ${REDIS_PASSWORD}\n Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.",
    "metadata": {
        "annotations": {
            "description": "Redis in-memory data structure store, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.\n\nNOTE: You must have persistent volumes available in your cluster to use this template.",
            "iconClass": "icon-redis",
            "openshift.io/display-name": "Redis",
            "openshift.io/documentation-url": "https://github.com/sclorg/redis-container/tree/master/3.2",
            "openshift.io/long-description": "This template provides a standalone Redis server.  The data is stored on persistent storage.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "database,redis"
        },
        "name": "redis-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-password": "{.data['database-password']}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "stringData": {
                "database-password": "${REDIS_PASSWORD}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "redis://{.spec.clusterIP}:{.spec.ports[?(.name==\"redis\")].port}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "redis",
                        "nodePort": 0,
                        "port": 6379,
                        "protocol": "TCP",
                        "targetPort": 6379
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "REDIS_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${DATABASE_SERVICE_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 6379
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "redis",
                                "ports": [
                                    {
                                        "containerPort": 6379,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "test \"$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)\" == \"PONG\""
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/redis/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "redis"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "redis:${REDIS_VERSION}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            },
            "status": {}
        }
    ],
    "parameters": [
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "The name of the OpenShift Service exposed for the database.",
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "redis"
        },
        {
            "description": "Password for the Redis connection user.",
            "displayName": "Redis Connection Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "REDIS_PASSWORD",
            "required": true
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "Version of Redis image to be used (3.2 or latest).",
            "displayName": "Version of Redis Image",
            "name": "REDIS_VERSION",
            "required": true,
            "value": "3.2"
        }
    ]
}`)

func examplesDbTemplatesRedisPersistentTemplateJsonBytes() ([]byte, error) {
	return _examplesDbTemplatesRedisPersistentTemplateJson, nil
}

func examplesDbTemplatesRedisPersistentTemplateJson() (*asset, error) {
	bytes, err := examplesDbTemplatesRedisPersistentTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/db-templates/redis-persistent-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsJenkinsEphemeralTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "jenkins-ephemeral",
        "template": "jenkins-ephemeral-template"
    },
    "message": "A Jenkins service has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.",
    "metadata": {
        "annotations": {
            "description": "Jenkins service, without persistent storage.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
            "iconClass": "icon-jenkins",
            "openshift.io/display-name": "Jenkins (Ephemeral)",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/other_images/jenkins.html",
            "openshift.io/long-description": "This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login.  The Jenkins configuration is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "instant-app,jenkins"
        },
        "name": "jenkins-ephemeral"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "annotations": {
                    "haproxy.router.openshift.io/timeout": "4m",
                    "template.openshift.io/expose-uri": "http://{.spec.host}{.spec.path}"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            },
            "spec": {
                "tls": {
                    "insecureEdgeTerminationPolicy": "Redirect",
                    "termination": "edge"
                },
                "to": {
                    "kind": "Service",
                    "name": "${JENKINS_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${JENKINS_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${JENKINS_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "OPENSHIFT_ENABLE_OAUTH",
                                        "value": "${ENABLE_OAUTH}"
                                    },
                                    {
                                        "name": "OPENSHIFT_ENABLE_REDIRECT_PROMPT",
                                        "value": "true"
                                    },
                                    {
                                        "name": "DISABLE_ADMINISTRATIVE_MONITORS",
                                        "value": "${DISABLE_ADMINISTRATIVE_MONITORS}"
                                    },
                                    {
                                        "name": "KUBERNETES_MASTER",
                                        "value": "https://kubernetes.default:443"
                                    },
                                    {
                                        "name": "KUBERNETES_TRUST_CERTIFICATES",
                                        "value": "true"
                                    },
                                    {
                                        "name": "JENKINS_SERVICE_NAME",
                                        "value": "${JENKINS_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "JNLP_SERVICE_NAME",
                                        "value": "${JNLP_SERVICE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 2,
                                    "httpGet": {
                                        "path": "/login",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 420,
                                    "periodSeconds": 360,
                                    "timeoutSeconds": 240
                                },
                                "name": "jenkins",
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/login",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 240
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/jenkins",
                                        "name": "${JENKINS_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "serviceAccountName": "${JENKINS_SERVICE_NAME}",
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": ""
                                },
                                "name": "${JENKINS_SERVICE_NAME}-data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "jenkins"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${JENKINS_IMAGE_STREAM_TAG}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ServiceAccount",
            "metadata": {
                "annotations": {
                    "serviceaccounts.openshift.io/oauth-redirectreference.jenkins": "{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"${JENKINS_SERVICE_NAME}\"}}"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "groupNames": null,
            "kind": "RoleBinding",
            "metadata": {
                "name": "${JENKINS_SERVICE_NAME}_edit"
            },
            "roleRef": {
                "name": "edit"
            },
            "subjects": [
                {
                    "kind": "ServiceAccount",
                    "name": "${JENKINS_SERVICE_NAME}"
                }
            ]
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "name": "${JNLP_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "agent",
                        "nodePort": 0,
                        "port": 50000,
                        "protocol": "TCP",
                        "targetPort": 50000
                    }
                ],
                "selector": {
                    "name": "${JENKINS_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${JNLP_SERVICE_NAME}\", \"namespace\": \"\", \"kind\": \"Service\"}]",
                    "service.openshift.io/infrastructure": "true"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "nodePort": 0,
                        "port": 80,
                        "protocol": "TCP",
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${JENKINS_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            }
        }
    ],
    "parameters": [
        {
            "description": "The name of the OpenShift Service exposed for the Jenkins container.",
            "displayName": "Jenkins Service Name",
            "name": "JENKINS_SERVICE_NAME",
            "value": "jenkins"
        },
        {
            "description": "The name of the service used for master/slave communication.",
            "displayName": "Jenkins JNLP Service Name",
            "name": "JNLP_SERVICE_NAME",
            "value": "jenkins-jnlp"
        },
        {
            "description": "Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.",
            "displayName": "Enable OAuth in Jenkins",
            "name": "ENABLE_OAUTH",
            "value": "true"
        },
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "value": "512Mi"
        },
        {
            "description": "The OpenShift Namespace where the Jenkins ImageStream resides.",
            "displayName": "Jenkins ImageStream Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "Whether to perform memory intensive, possibly slow, synchronization with the Jenkins Update Center on start.  If true, the Jenkins core update monitor and site warnings monitor are disabled.",
            "displayName": "Disable memory intensive administrative monitors",
            "name": "DISABLE_ADMINISTRATIVE_MONITORS",
            "value": "false"
        },
        {
            "description": "Name of the ImageStreamTag to be used for the Jenkins image.",
            "displayName": "Jenkins ImageStreamTag",
            "name": "JENKINS_IMAGE_STREAM_TAG",
            "value": "jenkins:2"
        }
    ]
}`)

func examplesJenkinsJenkinsEphemeralTemplateJsonBytes() ([]byte, error) {
	return _examplesJenkinsJenkinsEphemeralTemplateJson, nil
}

func examplesJenkinsJenkinsEphemeralTemplateJson() (*asset, error) {
	bytes, err := examplesJenkinsJenkinsEphemeralTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/jenkins-ephemeral-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsJenkinsPersistentTemplateJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "jenkins-persistent",
        "template": "jenkins-persistent-template"
    },
    "message": "A Jenkins service has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.",
    "metadata": {
        "annotations": {
            "description": "Jenkins service, with persistent storage.\n\nNOTE: You must have persistent volumes available in your cluster to use this template.",
            "iconClass": "icon-jenkins",
            "openshift.io/display-name": "Jenkins",
            "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/other_images/jenkins.html",
            "openshift.io/long-description": "This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "instant-app,jenkins"
        },
        "name": "jenkins-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "annotations": {
                    "haproxy.router.openshift.io/timeout": "4m",
                    "template.openshift.io/expose-uri": "http://{.spec.host}{.spec.path}"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            },
            "spec": {
                "tls": {
                    "insecureEdgeTerminationPolicy": "Redirect",
                    "termination": "edge"
                },
                "to": {
                    "kind": "Service",
                    "name": "${JENKINS_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${JENKINS_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${JENKINS_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${JENKINS_SERVICE_NAME}"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "capabilities": {},
                                "env": [
                                    {
                                        "name": "OPENSHIFT_ENABLE_OAUTH",
                                        "value": "${ENABLE_OAUTH}"
                                    },
                                    {
                                        "name": "OPENSHIFT_ENABLE_REDIRECT_PROMPT",
                                        "value": "true"
                                    },
                                    {
                                        "name": "DISABLE_ADMINISTRATIVE_MONITORS",
                                        "value": "${DISABLE_ADMINISTRATIVE_MONITORS}"
                                    },
                                    {
                                        "name": "KUBERNETES_MASTER",
                                        "value": "https://kubernetes.default:443"
                                    },
                                    {
                                        "name": "KUBERNETES_TRUST_CERTIFICATES",
                                        "value": "true"
                                    },
                                    {
                                        "name": "JENKINS_SERVICE_NAME",
                                        "value": "${JENKINS_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "JNLP_SERVICE_NAME",
                                        "value": "${JNLP_SERVICE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 2,
                                    "httpGet": {
                                        "path": "/login",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 420,
                                    "periodSeconds": 360,
                                    "timeoutSeconds": 240
                                },
                                "name": "jenkins",
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/login",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 240
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {},
                                    "privileged": false
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/jenkins",
                                        "name": "${JENKINS_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "serviceAccountName": "${JENKINS_SERVICE_NAME}",
                        "volumes": [
                            {
                                "name": "${JENKINS_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${JENKINS_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "jenkins"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${JENKINS_IMAGE_STREAM_TAG}",
                                "namespace": "${NAMESPACE}"
                            },
                            "lastTriggeredImage": ""
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ServiceAccount",
            "metadata": {
                "annotations": {
                    "serviceaccounts.openshift.io/oauth-redirectreference.jenkins": "{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"${JENKINS_SERVICE_NAME}\"}}"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "groupNames": null,
            "kind": "RoleBinding",
            "metadata": {
                "name": "${JENKINS_SERVICE_NAME}_edit"
            },
            "roleRef": {
                "name": "edit"
            },
            "subjects": [
                {
                    "kind": "ServiceAccount",
                    "name": "${JENKINS_SERVICE_NAME}"
                }
            ]
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "name": "${JNLP_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "agent",
                        "nodePort": 0,
                        "port": 50000,
                        "protocol": "TCP",
                        "targetPort": 50000
                    }
                ],
                "selector": {
                    "name": "${JENKINS_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${JNLP_SERVICE_NAME}\", \"namespace\": \"\", \"kind\": \"Service\"}]",
                    "service.openshift.io/infrastructure": "true"
                },
                "name": "${JENKINS_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "nodePort": 0,
                        "port": 80,
                        "protocol": "TCP",
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${JENKINS_SERVICE_NAME}"
                },
                "sessionAffinity": "None",
                "type": "ClusterIP"
            }
        }
    ],
    "parameters": [
        {
            "description": "The name of the OpenShift Service exposed for the Jenkins container.",
            "displayName": "Jenkins Service Name",
            "name": "JENKINS_SERVICE_NAME",
            "value": "jenkins"
        },
        {
            "description": "The name of the service used for master/slave communication.",
            "displayName": "Jenkins JNLP Service Name",
            "name": "JNLP_SERVICE_NAME",
            "value": "jenkins-jnlp"
        },
        {
            "description": "Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.",
            "displayName": "Enable OAuth in Jenkins",
            "name": "ENABLE_OAUTH",
            "value": "true"
        },
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "value": "512Mi"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "The OpenShift Namespace where the Jenkins ImageStream resides.",
            "displayName": "Jenkins ImageStream Namespace",
            "name": "NAMESPACE",
            "value": "openshift"
        },
        {
            "description": "Whether to perform memory intensive, possibly slow, synchronization with the Jenkins Update Center on start.  If true, the Jenkins core update monitor and site warnings monitor are disabled.",
            "displayName": "Disable memory intensive administrative monitors",
            "name": "DISABLE_ADMINISTRATIVE_MONITORS",
            "value": "false"
        },
        {
            "description": "Name of the ImageStreamTag to be used for the Jenkins image.",
            "displayName": "Jenkins ImageStreamTag",
            "name": "JENKINS_IMAGE_STREAM_TAG",
            "value": "jenkins:2"
        }
    ]
}`)

func examplesJenkinsJenkinsPersistentTemplateJsonBytes() ([]byte, error) {
	return _examplesJenkinsJenkinsPersistentTemplateJson, nil
}

func examplesJenkinsJenkinsPersistentTemplateJson() (*asset, error) {
	bytes, err := examplesJenkinsJenkinsPersistentTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/jenkins-persistent-template.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsPipelineBluegreenPipelineYaml = []byte(`apiVersion: v1
kind: Template
labels:
  template: bluegreen-pipeline
message: A Jenkins server will be automatically instantiated in this project to manage
  the Pipeline BuildConfig created by this template.  You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    description: This example showcases a blue green deployment using a Jenkins
      pipeline that pauses for approval.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: bluegreen-pipeline
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: bluegreen-pipeline
    name: bluegreen-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="${NAME}"
                def project=""
                def tag="blue"
                def altTag="green"
                def verbose="${VERBOSE}"
        
                node {
                  project = env.PROJECT_NAME
                  stage("Initialize") {
                    sh "oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' --loglevel=4 > activeservice"
                    activeService = readFile('activeservice').trim()
                    if (activeService == "${appName}-blue") {
                      tag = "green"
                      altTag = "blue"
                    }
                    sh "oc get route ${tag}-${appName} -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
                    routeHost = readFile('routehost').trim()
                  }
        
                  stage("Build") {
                    echo "building tag ${tag}"
                    openshiftBuild buildConfig: appName, showBuildLogs: "true", verbose: verbose
                  }
        
                  stage("Deploy Test") {
                    openshiftTag srcStream: appName, srcTag: 'latest', destinationStream: appName, destinationTag: tag, verbose: verbose
                    openshiftVerifyDeployment deploymentConfig: "${appName}-${tag}", verbose: verbose
                  }
        
                  stage("Test") {
                    input message: "Test deployment: http://${routeHost}. Approve?", id: "approval"
                  }
        
                  stage("Go Live") {
                    sh "oc set -n ${project} route-backends ${appName} ${appName}-${tag}=100 ${appName}-${altTag}=0 --loglevel=4"
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }          
      type: JenkinsPipeline
    triggers:
    - github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
      type: GitHub
    - generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
      type: Generic
- apiVersion: v1
  kind: Route
  metadata:
    name: blue-${NAME}
  spec:
    to:
      kind: Service
      name: ${NAME}-blue
- apiVersion: v1
  kind: Route
  metadata:
    name: green-${NAME}
  spec:
    to:
      kind: Service
      name: ${NAME}-green
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    alternateBackends:
    - name: ${NAME}-green
      weight: 0
    to:
      kind: Service
      name: ${NAME}-blue
      weight: 100
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit:
      script: npm test
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: NPM_MIRROR
          value: ${NPM_MIRROR}
        from:
          kind: ImageStreamTag
          name: nodejs:4
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
    name: ${NAME}-blue
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}-blue
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    name: ${NAME}-blue
  spec:
    replicas: 1
    selector:
      name: ${NAME}-blue
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}-blue
        name: ${NAME}-blue
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_USER
            value: ${DATABASE_USER}
          - name: MONGODB_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${DATABASE_ADMIN_PASSWORD}
          image: ' '
          livenessProbe:
            httpGet:
              path: /pagecount
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: nodejs-mongodb-example
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /pagecount
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-mongodb-example
        from:
          kind: ImageStreamTag
          name: ${NAME}:blue
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
    name: ${NAME}-green
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}-green
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    name: ${NAME}-green
  spec:
    replicas: 1
    selector:
      name: ${NAME}-green
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}-green
        name: ${NAME}-green
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_USER
            value: ${DATABASE_USER}
          - name: MONGODB_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${DATABASE_ADMIN_PASSWORD}
          image: ' '
          livenessProbe:
            httpGet:
              path: /pagecount
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: nodejs-mongodb-example
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /pagecount
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-mongodb-example
        from:
          kind: ImageStreamTag
          name: ${NAME}:green
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mongodb
      port: 27017
      targetPort: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
        name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            value: ${DATABASE_USER}
          - name: MONGODB_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${DATABASE_ADMIN_PASSWORD}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_MONGODB_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${DATABASE_SERVICE_NAME}-data
        volumes:
        - emptyDir:
            medium: ""
          name: ${DATABASE_SERVICE_NAME}-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: nodejs-mongodb-example
- description: The exposed hostname that will route to the Node.js service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/openshift/nodejs-ex.git
- description: The reference of the repository with your application source code.
  displayName: Git Repository Ref
  name: SOURCE_REPOSITORY_REF
  required: true
  value: master
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: sampledb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: DATABASE_USER
- description: Password for the MongoDB user.
  displayName: MongoDB Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- description: Maximum amount of memory the Node.js container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MongoDB container can use.
  displayName: Memory Limit (MongoDB)
  name: MEMORY_MONGODB_LIMIT
  required: true
  value: 512Mi
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- description: Password for the database admin user.
  displayName: Database Administrator Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- description: The custom NPM mirror URL
  displayName: Custom NPM Mirror URL
  name: NPM_MIRROR
- description: The OpenShift Namespace where the NodeJS and MongoDB ImageStreams reside.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Whether to enable verbose logging of Jenkinsfile steps in pipeline
  displayName: Verbose
  name: VERBOSE
  required: true
  value: "false"
`)

func examplesJenkinsPipelineBluegreenPipelineYamlBytes() ([]byte, error) {
	return _examplesJenkinsPipelineBluegreenPipelineYaml, nil
}

func examplesJenkinsPipelineBluegreenPipelineYaml() (*asset, error) {
	bytes, err := examplesJenkinsPipelineBluegreenPipelineYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/pipeline/bluegreen-pipeline.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsPipelineMapsappPipelineYaml = []byte(`apiVersion: v1
kind: Template
labels:
  application: mapsapp-pipeline
metadata:
  name: mapsapp-pipeline
parameters:
- description: NationalParks application source URI
  displayName: NationalParks Source URI
  name: NATIONALPARKS_GIT_URI
  required: true
  value: https://github.com/openshift-roadshow/nationalparks.git
- description: NationalParks application source reference
  displayName: NationalParks Source Ref
  name: NATIONALPARKS_GIT_REF
  required: true
  value: master
- description: MLBParks application source URI
  displayName: MLBParks Source URI
  name: MLBPARKS_GIT_URI
  required: true
  value: https://github.com/openshift-roadshow/mlbparks.git
- description: MLBParks application source reference
  displayName: MLBParks Source Ref
  name: MLBPARKS_GIT_REF
  required: true
  value: master
- description: ParksMap application source URI
  displayName: ParksMap Source URI
  name: PARKSMAP_GIT_URI
  required: true
  value: https://github.com/openshift-roadshow/parksmap-web.git
- description: ParksMap application source reference
  displayName: ParksMap Source Ref
  name: PARKSMAP_GIT_REF
  required: true
  value: master
- name: GITHUB_WEBHOOK_SECRET
  displayName: GitHub Webhook Secret
  description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: GENERIC_WEBHOOK_SECRET
  displayName: Generic Webhook Secret,
  description: A secret string used to configure the Generic webhook.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      build: mapsapp-pipeline
    name: mapsapp-pipeline
  spec:
    runPolicy: Serial
    source: {}
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def project = ""
                node {
                  project = "${env.PROJECT_NAME}"
        
                  stage('Create NationalParks back-end') {
                    def nationalParksURL = "${NATIONALPARKS_GIT_URI}"
                    def nationalParksBranch = "${NATIONALPARKS_GIT_REF}"
                    checkout([$class: "GitSCM", branches: [[name: "*/${nationalParksBranch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "nationalparks"]], submoduleCfg: [], userRemoteConfigs: [[url: "${nationalParksURL}"]]])
                    sh "oc new-app -f nationalparks/ose3/pipeline-buildconfig-template.json -p GIT_URI=${nationalParksURL} -p GIT_REF=${nationalParksBranch} -n ${project} --dry-run -o yaml | oc apply -f - -n ${project}"
                  }
        
                  stage('Create MLBParks back-end') {
                    def mlbParksURL = "${MLBPARKS_GIT_URI}"
                    def mlbParksBranch = "${MLBPARKS_GIT_REF}"
                    checkout([$class: "GitSCM", branches: [[name: "*/${mlbParksBranch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "mlbparks"]], submoduleCfg: [], userRemoteConfigs: [[url: "${mlbParksURL}"]]])
                    sh "oc new-app -f mlbparks/ose3/pipeline-buildconfig-template.json -p GIT_URI=${mlbParksURL} -p GIT_REF=${mlbParksBranch} -n ${project} --dry-run -o yaml | oc apply -f - -n ${project}"
                  }
        
                  stage('Create ParksMap front-end') {
                    def parksMapURL = "${PARKSMAP_GIT_URI}"
                    def parksMapBranch = "${PARKSMAP_GIT_REF}"
                    checkout([$class: "GitSCM", branches: [[name: "*/${parksMapBranch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "parksmap"]], submoduleCfg: [], userRemoteConfigs: [[url: "${parksMapURL}"]]])
                    sh "oc new-app -f parksmap/ose3/pipeline-buildconfig-template.json -p GIT_URI=${parksMapURL} -p GIT_REF=${parksMapBranch} -n ${project} --dry-run -o yaml | oc apply -f - -n ${project}"
                  }
                }
        
                stage('Build Back-ends') {
                  parallel (
                    "nationalparks": {
                      node {
                        openshiftBuild buildConfig: "nationalparks-pipeline", namespace: project
                      }
                    },
                    "mlbparks": {
                      node {
                        openshiftBuild buildConfig: "mlbparks-pipeline", namespace: project
                      }
                    }
                  )
                }
        
                node {
                  stage('Build Front-end') {
                    openshiftBuild buildConfig: "parksmap-pipeline", namespace: project
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }          
    triggers:
    - github:
        secret: ${GITHUB_TRIGGER_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_TRIGGER_SECRET}
      type: Generic
`)

func examplesJenkinsPipelineMapsappPipelineYamlBytes() ([]byte, error) {
	return _examplesJenkinsPipelineMapsappPipelineYaml, nil
}

func examplesJenkinsPipelineMapsappPipelineYaml() (*asset, error) {
	bytes, err := examplesJenkinsPipelineMapsappPipelineYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/pipeline/mapsapp-pipeline.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsPipelineMavenPipelineYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: maven-pipeline
parameters:
- name: APP_NAME
  description: The name assigned to all of the application objects defined in this template.
  displayName: Application Name
  required: true
  value: openshift-jee-sample
- name: GIT_SOURCE_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
  value: https://github.com/openshift/openshift-jee-sample.git
- name: GIT_SOURCE_REF
  description: The source Ref for the application
  displayName: Source Ref
  required: true
  value: master
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: wildfly
  spec:
    tags:
    - annotations:
        supports: wildfly:10.1,jee,java
        tags: builder,wildfly,java
        version: "10.1"
      from:
        kind: DockerImage
        name: openshift/wildfly-101-centos7:latest
      name: "10.1"
    - annotations:
        supports: jee,java
        tags: builder,wildfly,java
      from:
        kind: ImageStreamTag
        name: "10.1"
      name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="${APP_NAME}"
                def project=""

                node {
                  stage("Initialize") {
                    project = env.PROJECT_NAME
                  }
                }

                node("maven") {
                  stage("Checkout") {
                    git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
                  }
                  stage("Build WAR") {
                    sh "mvn clean package -Popenshift"
                    stash name:"war", includes:"target/ROOT.war"
                  }
                }

                node {
                  stage("Build Image") {
                    unstash name:"war"
                    sh "oc start-build ${appName}-docker --from-file=target/ROOT.war -n ${project}"
                    openshiftVerifyBuild bldCfg: "${appName}-docker", namespace: project, waitTime: '20', waitUnit: 'min'
                  }
                  stage("Deploy") {
                    openshiftDeploy deploymentConfig: appName, namespace: project
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
      type: GitHub
    - generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
      type: Generic
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}-docker
    name: ${APP_NAME}-docker
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM wildfly
        COPY ROOT.war /wildfly/standalone/deployments/ROOT.war
        CMD $STI_SCRIPTS_PATH/run
      binary:
        asFile: ROOT.war
      type: Docker
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: wildfly:latest
      type: Docker
    triggers: []
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: ${APP_NAME}:latest
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None
`)

func examplesJenkinsPipelineMavenPipelineYamlBytes() ([]byte, error) {
	return _examplesJenkinsPipelineMavenPipelineYaml, nil
}

func examplesJenkinsPipelineMavenPipelineYaml() (*asset, error) {
	bytes, err := examplesJenkinsPipelineMavenPipelineYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/pipeline/maven-pipeline.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsPipelineNodejsSamplePipelineYaml = []byte(`kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "nodejs-sample-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        // path of the template to use
        def templatePath = 'https://raw.githubusercontent.com/openshift/nodejs-ex/master/openshift/templates/nodejs-mongodb.json'
        // name of the template that will be created
        def templateName = 'nodejs-mongodb-example'
        // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
        // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
        // will not be fully engaged.
        pipeline {
            agent {
              node {
                // spin up a node.js slave pod to run this build on
                label 'nodejs'
              }
            }
            options {
                // set a timeout of 20 minutes for this pipeline
                timeout(time: 20, unit: 'MINUTES')
            }

            stages {
                stage('preamble') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    echo "Using project: ${openshift.project()}"
                                }
                            }
                        }
                    }
                }
                stage('cleanup') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // delete everything with this template label
                                    openshift.selector("all", [ template : templateName ]).delete()
                                    // delete any secrets with this template label
                                    if (openshift.selector("secrets", templateName).exists()) {
                                        openshift.selector("secrets", templateName).delete()
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('create') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // create a new application from the templatePath
                                    openshift.newApp(templatePath)
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('build') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    def builds = openshift.selector("bc", templateName).related('builds')
                                    builds.untilEach(1) {
                                        return (it.object().status.phase == "Complete")
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('deploy') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    def rm = openshift.selector("dc", templateName).rollout()
                                    openshift.selector("dc", templateName).related('pods').untilEach(1) {
                                        return (it.object().status.phase == "Running")
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('tag') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
                                    // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
                                    // image to change and then deploy it to the staging environment
                                    openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                                }
                            }
                        } // script
                    } // steps
                } // stage
            } // stages
        } // pipeline
      type: JenkinsPipeline
`)

func examplesJenkinsPipelineNodejsSamplePipelineYamlBytes() ([]byte, error) {
	return _examplesJenkinsPipelineNodejsSamplePipelineYaml, nil
}

func examplesJenkinsPipelineNodejsSamplePipelineYaml() (*asset, error) {
	bytes, err := examplesJenkinsPipelineNodejsSamplePipelineYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/pipeline/nodejs-sample-pipeline.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsPipelineOpenshiftClientPluginPipelineYaml = []byte(`apiVersion: v1
kind: BuildConfig
metadata:
  labels:
    name: sample-pipeline-openshift-client-plugin
  name: sample-pipeline-openshift-client-plugin
spec:
  source:
    type: Git
    git:
      uri: https://github.com/openshift/jenkins-client-plugin.git
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfilePath: examples/jenkins-image-sample.groovy
`)

func examplesJenkinsPipelineOpenshiftClientPluginPipelineYamlBytes() ([]byte, error) {
	return _examplesJenkinsPipelineOpenshiftClientPluginPipelineYaml, nil
}

func examplesJenkinsPipelineOpenshiftClientPluginPipelineYaml() (*asset, error) {
	bytes, err := examplesJenkinsPipelineOpenshiftClientPluginPipelineYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/pipeline/openshift-client-plugin-pipeline.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesJenkinsPipelineSamplepipelineYaml = []byte(`apiVersion: v1
kind: Template
labels:
  template: application-template-sample-pipeline
message: |-
  A Jenkins server will be automatically instantiated in this project to manage
  the Pipeline BuildConfig created by this template.  You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    openshift.io/display-name: Pipeline Build Example
    description: |-
      This example showcases the new Jenkins Pipeline integration in OpenShift,
      which performs continuous integration and deployment right on the platform.
      The template contains a Jenkinsfile - a definition of a multi-stage CI/CD process - that
      leverages the underlying OpenShift platform for dynamic and scalable
      builds. OpenShift integrates the status of your pipeline builds into the web
      console allowing you to see your entire application lifecycle in a single view.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: jenkins-pipeline-example
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: nodejs-mongodb-example
- description: The exposed hostname that will route to the Node.js service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/openshift/nodejs-ex.git
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: sampledb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: DATABASE_USER
- description: Password for the MongoDB user.
  displayName: MongoDB Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- description: Maximum amount of memory the Node.js container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MongoDB container can use.
  displayName: Memory Limit (MongoDB)
  name: MEMORY_MONGODB_LIMIT
  required: true
  value: 512Mi
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- description: Password for the database admin user.
  displayName: Database Administrator Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- description: The custom NPM mirror URL
  displayName: Custom NPM Mirror URL
  name: NPM_MIRROR
- description: The OpenShift Namespace where the NodeJS and MongoDB ImageStreams reside.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      name: sample-pipeline
    name: sample-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                node('nodejs') {
                    stage('build') {
                      openshiftBuild(buildConfig: '${NAME}', showBuildLogs: 'true')
                    }
                    stage('deploy') {
                      openshiftDeploy(deploymentConfig: '${NAME}')
                    }
                  }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }          
      type: JenkinsPipeline
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit:
      script: npm test
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: NPM_MIRROR
          value: ${NPM_MIRROR}
        from:
          kind: ImageStreamTag
          name: nodejs:4
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_USER
            value: ${DATABASE_USER}
          - name: MONGODB_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${DATABASE_ADMIN_PASSWORD}
          image: ' '
          livenessProbe:
            httpGet:
              path: /pagecount
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: nodejs-mongodb-example
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /pagecount
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: false
        containerNames:
        - nodejs-mongodb-example
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mongodb
      port: 27017
      targetPort: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
        name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            value: ${DATABASE_USER}
          - name: MONGODB_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${DATABASE_ADMIN_PASSWORD}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_MONGODB_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${DATABASE_SERVICE_NAME}-data
        volumes:
        - emptyDir:
            medium: ""
          name: ${DATABASE_SERVICE_NAME}-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
`)

func examplesJenkinsPipelineSamplepipelineYamlBytes() ([]byte, error) {
	return _examplesJenkinsPipelineSamplepipelineYaml, nil
}

func examplesJenkinsPipelineSamplepipelineYaml() (*asset, error) {
	bytes, err := examplesJenkinsPipelineSamplepipelineYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/jenkins/pipeline/samplepipeline.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsCakephpMysqlPersistentJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "cakephp-mysql-persistent",
        "template": "cakephp-mysql-persistent"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/cake-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example CakePHP application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/cakephp-ex/blob/master/README.md.",
            "iconClass": "icon-php",
            "openshift.io/display-name": "CakePHP + MySQL",
            "openshift.io/documentation-url": "https://github.com/openshift/cakephp-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a CakePHP application, including a build configuration, application deployment configuration, and database deployment configuration.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,php,cakephp",
            "template.openshift.io/bindable": "false"
        },
        "name": "cakephp-mysql-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "cakephp-secret-token": "${CAKEPHP_SECRET_TOKEN}",
                "cakephp-security-cipher-seed": "${CAKEPHP_SECURITY_CIPHER_SEED}",
                "cakephp-security-salt": "${CAKEPHP_SECURITY_SALT}",
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "./lib/Cake/Console/cake test app AllTests"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "COMPOSER_MIRROR",
                                "value": "${COMPOSER_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "php:7.0",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "recreateParams": {
                        "pre": {
                            "execNewPod": {
                                "command": [
                                    "./migrate-database.sh"
                                ],
                                "containerName": "cakephp-mysql-persistent"
                            },
                            "failurePolicy": "Retry"
                        }
                    },
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_ENGINE",
                                        "value": "${DATABASE_ENGINE}"
                                    },
                                    {
                                        "name": "DATABASE_NAME",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "DATABASE_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CAKEPHP_SECRET_TOKEN",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "cakephp-secret-token",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CAKEPHP_SECURITY_SALT",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "cakephp-security-salt",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CAKEPHP_SECURITY_CIPHER_SEED",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "cakephp-security-cipher-seed",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "OPCACHE_REVALIDATE_FREQ",
                                        "value": "${OPCACHE_REVALIDATE_FREQ}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health.php",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "periodSeconds": 60,
                                    "timeoutSeconds": 3
                                },
                                "name": "cakephp-mysql-persistent",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health.php",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "periodSeconds": 60,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "cakephp-mysql-persistent"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mysql",
                        "port": 3306,
                        "targetPort": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mysql",
                                "ports": [
                                    {
                                        "containerPort": 3306
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_MYSQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mysql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mysql:5.7",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "cakephp-mysql-persistent"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the CakePHP container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the MySQL container can use.",
            "displayName": "Memory Limit (MySQL)",
            "name": "MEMORY_MYSQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/cakephp-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the CakePHP service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mysql"
        },
        {
            "description": "Database engine: postgresql, mysql or sqlite (default).",
            "displayName": "Database Engine",
            "name": "DATABASE_ENGINE",
            "required": true,
            "value": "mysql"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "default"
        },
        {
            "displayName": "Database User",
            "name": "DATABASE_USER",
            "required": true,
            "value": "cakephp"
        },
        {
            "displayName": "Database Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "description": "Set this to a long random string.",
            "displayName": "CakePHP secret token",
            "from": "[\\w]{50}",
            "generate": "expression",
            "name": "CAKEPHP_SECRET_TOKEN"
        },
        {
            "description": "Security salt for session hash.",
            "displayName": "CakePHP Security Salt",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "CAKEPHP_SECURITY_SALT"
        },
        {
            "description": "Security cipher seed for session hash.",
            "displayName": "CakePHP Security Cipher Seed",
            "from": "[0-9]{30}",
            "generate": "expression",
            "name": "CAKEPHP_SECURITY_CIPHER_SEED"
        },
        {
            "description": "How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request.",
            "displayName": "OPcache Revalidation Frequency",
            "name": "OPCACHE_REVALIDATE_FREQ",
            "value": "2"
        },
        {
            "description": "The custom Composer mirror URL",
            "displayName": "Custom Composer Mirror URL",
            "name": "COMPOSER_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsCakephpMysqlPersistentJsonBytes() ([]byte, error) {
	return _examplesQuickstartsCakephpMysqlPersistentJson, nil
}

func examplesQuickstartsCakephpMysqlPersistentJson() (*asset, error) {
	bytes, err := examplesQuickstartsCakephpMysqlPersistentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/cakephp-mysql-persistent.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsCakephpMysqlJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "cakephp-mysql-example",
        "template": "cakephp-mysql-example"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/cake-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example CakePHP application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/cakephp-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
            "iconClass": "icon-php",
            "openshift.io/display-name": "CakePHP + MySQL (Ephemeral)",
            "openshift.io/documentation-url": "https://github.com/openshift/cakephp-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a CakePHP application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,php,cakephp",
            "template.openshift.io/bindable": "false"
        },
        "name": "cakephp-mysql-example"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "cakephp-secret-token": "${CAKEPHP_SECRET_TOKEN}",
                "cakephp-security-cipher-seed": "${CAKEPHP_SECURITY_CIPHER_SEED}",
                "cakephp-security-salt": "${CAKEPHP_SECURITY_SALT}",
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "./lib/Cake/Console/cake test app AllTests"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "COMPOSER_MIRROR",
                                "value": "${COMPOSER_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "php:7.0",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "recreateParams": {
                        "pre": {
                            "execNewPod": {
                                "command": [
                                    "./migrate-database.sh"
                                ],
                                "containerName": "cakephp-mysql-example"
                            },
                            "failurePolicy": "Retry"
                        }
                    },
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_ENGINE",
                                        "value": "${DATABASE_ENGINE}"
                                    },
                                    {
                                        "name": "DATABASE_NAME",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "DATABASE_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CAKEPHP_SECRET_TOKEN",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "cakephp-secret-token",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CAKEPHP_SECURITY_SALT",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "cakephp-security-salt",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CAKEPHP_SECURITY_CIPHER_SEED",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "cakephp-security-cipher-seed",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "OPCACHE_REVALIDATE_FREQ",
                                        "value": "${OPCACHE_REVALIDATE_FREQ}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health.php",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "periodSeconds": 60,
                                    "timeoutSeconds": 3
                                },
                                "name": "cakephp-mysql-example",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health.php",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "periodSeconds": 60,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "cakephp-mysql-example"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mysql",
                        "port": 3306,
                        "targetPort": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mysql",
                                "ports": [
                                    {
                                        "containerPort": 3306
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_MYSQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mysql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mysql:5.7",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "cakephp-mysql-example"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the CakePHP container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the MySQL container can use.",
            "displayName": "Memory Limit (MySQL)",
            "name": "MEMORY_MYSQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/cakephp-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the CakePHP service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mysql"
        },
        {
            "description": "Database engine: postgresql, mysql or sqlite (default).",
            "displayName": "Database Engine",
            "name": "DATABASE_ENGINE",
            "required": true,
            "value": "mysql"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "default"
        },
        {
            "displayName": "Database User",
            "name": "DATABASE_USER",
            "required": true,
            "value": "cakephp"
        },
        {
            "displayName": "Database Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "description": "Set this to a long random string.",
            "displayName": "CakePHP secret token",
            "from": "[\\w]{50}",
            "generate": "expression",
            "name": "CAKEPHP_SECRET_TOKEN"
        },
        {
            "description": "Security salt for session hash.",
            "displayName": "CakePHP Security Salt",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "CAKEPHP_SECURITY_SALT"
        },
        {
            "description": "Security cipher seed for session hash.",
            "displayName": "CakePHP Security Cipher Seed",
            "from": "[0-9]{30}",
            "generate": "expression",
            "name": "CAKEPHP_SECURITY_CIPHER_SEED"
        },
        {
            "description": "How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request.",
            "displayName": "OPcache Revalidation Frequency",
            "name": "OPCACHE_REVALIDATE_FREQ",
            "value": "2"
        },
        {
            "description": "The custom Composer mirror URL",
            "displayName": "Custom Composer Mirror URL",
            "name": "COMPOSER_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsCakephpMysqlJsonBytes() ([]byte, error) {
	return _examplesQuickstartsCakephpMysqlJson, nil
}

func examplesQuickstartsCakephpMysqlJson() (*asset, error) {
	bytes, err := examplesQuickstartsCakephpMysqlJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/cakephp-mysql.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsDancerMysqlPersistentJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "dancer-mysql-persistent",
        "template": "dancer-mysql-persistent"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Dancer application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.",
            "iconClass": "icon-perl",
            "openshift.io/display-name": "Dancer + MySQL",
            "openshift.io/documentation-url": "https://github.com/openshift/dancer-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a Dancer based application, including a build configuration, application deployment configuration, and database deployment configuration.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,perl,dancer",
            "template.openshift.io/bindable": "false"
        },
        "name": "dancer-mysql-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}",
                "keybase": "${SECRET_KEY_BASE}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "perl -I extlib/lib/perl5 -I lib t/*"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "CPAN_MIRROR",
                                "value": "${CPAN_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "perl:5.24",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "SECRET_KEY_BASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "keybase",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "PERL_APACHE2_RELOAD",
                                        "value": "${PERL_APACHE2_RELOAD}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "dancer-mysql-persistent",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "dancer-mysql-persistent"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mysql",
                        "port": 3306,
                        "targetPort": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mysql",
                                "ports": [
                                    {
                                        "containerPort": 3306
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_MYSQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mysql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mysql:5.7",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "dancer-mysql-persistent"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Perl Dancer container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the MySQL container can use.",
            "displayName": "Memory Limit (MySQL)",
            "name": "MEMORY_MYSQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/dancer-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Dancer service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "database"
        },
        {
            "displayName": "Database Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "DATABASE_USER"
        },
        {
            "displayName": "Database Password",
            "from": "[a-zA-Z0-9]{8}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Set this to \"true\" to enable automatic reloading of modified Perl modules.",
            "displayName": "Perl Module Reload",
            "name": "PERL_APACHE2_RELOAD",
            "value": ""
        },
        {
            "description": "Your secret key for verifying the integrity of signed cookies.",
            "displayName": "Secret Key",
            "from": "[a-z0-9]{127}",
            "generate": "expression",
            "name": "SECRET_KEY_BASE"
        },
        {
            "description": "The custom CPAN mirror URL",
            "displayName": "Custom CPAN Mirror URL",
            "name": "CPAN_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsDancerMysqlPersistentJsonBytes() ([]byte, error) {
	return _examplesQuickstartsDancerMysqlPersistentJson, nil
}

func examplesQuickstartsDancerMysqlPersistentJson() (*asset, error) {
	bytes, err := examplesQuickstartsDancerMysqlPersistentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/dancer-mysql-persistent.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsDancerMysqlJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "dancer-mysql-example",
        "template": "dancer-mysql-example"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Dancer application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
            "iconClass": "icon-perl",
            "openshift.io/display-name": "Dancer + MySQL (Ephemeral)",
            "openshift.io/documentation-url": "https://github.com/openshift/dancer-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a Dancer based application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,perl,dancer",
            "template.openshift.io/bindable": "false"
        },
        "name": "dancer-mysql-example"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}",
                "keybase": "${SECRET_KEY_BASE}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "perl -I extlib/lib/perl5 -I lib t/*"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "CPAN_MIRROR",
                                "value": "${CPAN_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "perl:5.24",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "SECRET_KEY_BASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "keybase",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "PERL_APACHE2_RELOAD",
                                        "value": "${PERL_APACHE2_RELOAD}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "dancer-mysql-example",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "dancer-mysql-example"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mysql",
                        "port": 3306,
                        "targetPort": 3306
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MYSQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 3306
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mysql",
                                "ports": [
                                    {
                                        "containerPort": 3306
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_MYSQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mysql/data",
                                        "name": "data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mysql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mysql:5.7",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "dancer-mysql-example"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Perl Dancer container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the MySQL container can use.",
            "displayName": "Memory Limit (MySQL)",
            "name": "MEMORY_MYSQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/dancer-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Dancer service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "database"
        },
        {
            "displayName": "Database Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "DATABASE_USER"
        },
        {
            "displayName": "Database Password",
            "from": "[a-zA-Z0-9]{8}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Set this to \"true\" to enable automatic reloading of modified Perl modules.",
            "displayName": "Perl Module Reload",
            "name": "PERL_APACHE2_RELOAD",
            "value": ""
        },
        {
            "description": "Your secret key for verifying the integrity of signed cookies.",
            "displayName": "Secret Key",
            "from": "[a-z0-9]{127}",
            "generate": "expression",
            "name": "SECRET_KEY_BASE"
        },
        {
            "description": "The custom CPAN mirror URL",
            "displayName": "Custom CPAN Mirror URL",
            "name": "CPAN_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsDancerMysqlJsonBytes() ([]byte, error) {
	return _examplesQuickstartsDancerMysqlJson, nil
}

func examplesQuickstartsDancerMysqlJson() (*asset, error) {
	bytes, err := examplesQuickstartsDancerMysqlJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/dancer-mysql.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsDjangoPostgresqlPersistentJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "django-psql-persistent",
        "template": "django-psql-persistent"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Django application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.",
            "iconClass": "icon-python",
            "openshift.io/display-name": "Django + PostgreSQL",
            "openshift.io/documentation-url": "https://github.com/openshift/django-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a Django based application, including a build configuration, application deployment configuration, and database deployment configuration.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,python,django",
            "template.openshift.io/bindable": "false"
        },
        "name": "django-psql-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}",
                "django-secret-key": "${DJANGO_SECRET_KEY}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "./manage.py test"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "PIP_INDEX_URL",
                                "value": "${PIP_INDEX_URL}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "python:3.5",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_ENGINE",
                                        "value": "${DATABASE_ENGINE}"
                                    },
                                    {
                                        "name": "DATABASE_NAME",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "DATABASE_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "APP_CONFIG",
                                        "value": "${APP_CONFIG}"
                                    },
                                    {
                                        "name": "DJANGO_SECRET_KEY",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "django-secret-key",
                                                "name": "${NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "django-psql-persistent",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "django-psql-persistent"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "postgresql",
                        "port": 5432,
                        "targetPort": 5432
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container",
                                            "--live"
                                        ]
                                    },
                                    "initialDelaySeconds": 120,
                                    "timeoutSeconds": 10
                                },
                                "name": "postgresql",
                                "ports": [
                                    {
                                        "containerPort": 5432
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/pgsql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "postgresql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "postgresql:9.5",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "django-psql-persistent"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Django container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the PostgreSQL container can use.",
            "displayName": "Memory Limit (PostgreSQL)",
            "name": "MEMORY_POSTGRESQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/django-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Django service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "postgresql"
        },
        {
            "description": "Database engine: postgresql, mysql or sqlite (default).",
            "displayName": "Database Engine",
            "name": "DATABASE_ENGINE",
            "required": true,
            "value": "postgresql"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "default"
        },
        {
            "displayName": "Database Username",
            "name": "DATABASE_USER",
            "required": true,
            "value": "django"
        },
        {
            "displayName": "Database User Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "description": "Relative path to Gunicorn configuration file (optional).",
            "displayName": "Application Configuration File Path",
            "name": "APP_CONFIG"
        },
        {
            "description": "Set this to a long random string.",
            "displayName": "Django Secret Key",
            "from": "[\\w]{50}",
            "generate": "expression",
            "name": "DJANGO_SECRET_KEY"
        },
        {
            "description": "The custom PyPi index URL",
            "displayName": "Custom PyPi Index URL",
            "name": "PIP_INDEX_URL",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsDjangoPostgresqlPersistentJsonBytes() ([]byte, error) {
	return _examplesQuickstartsDjangoPostgresqlPersistentJson, nil
}

func examplesQuickstartsDjangoPostgresqlPersistentJson() (*asset, error) {
	bytes, err := examplesQuickstartsDjangoPostgresqlPersistentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/django-postgresql-persistent.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsDjangoPostgresqlJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "django-psql-example",
        "template": "django-psql-example"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Django application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
            "iconClass": "icon-python",
            "openshift.io/display-name": "Django + PostgreSQL (Ephemeral)",
            "openshift.io/documentation-url": "https://github.com/openshift/django-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a Django based application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,python,django",
            "template.openshift.io/bindable": "false"
        },
        "name": "django-psql-example"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}",
                "django-secret-key": "${DJANGO_SECRET_KEY}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "./manage.py test"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "PIP_INDEX_URL",
                                "value": "${PIP_INDEX_URL}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "python:3.5",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_ENGINE",
                                        "value": "${DATABASE_ENGINE}"
                                    },
                                    {
                                        "name": "DATABASE_NAME",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "DATABASE_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "DATABASE_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "APP_CONFIG",
                                        "value": "${APP_CONFIG}"
                                    },
                                    {
                                        "name": "DJANGO_SECRET_KEY",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "django-secret-key",
                                                "name": "${NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "django-psql-example",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "django-psql-example"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "postgresql",
                        "port": 5432,
                        "targetPort": 5432
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container",
                                            "--live"
                                        ]
                                    },
                                    "initialDelaySeconds": 120,
                                    "timeoutSeconds": 10
                                },
                                "name": "postgresql",
                                "ports": [
                                    {
                                        "containerPort": 5432
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/pgsql/data",
                                        "name": "data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "postgresql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "postgresql:9.5",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "django-psql-example"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Django container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the PostgreSQL container can use.",
            "displayName": "Memory Limit (PostgreSQL)",
            "name": "MEMORY_POSTGRESQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/django-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Django service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "postgresql"
        },
        {
            "description": "Database engine: postgresql, mysql or sqlite (default).",
            "displayName": "Database Engine",
            "name": "DATABASE_ENGINE",
            "required": true,
            "value": "postgresql"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "default"
        },
        {
            "displayName": "Database Username",
            "name": "DATABASE_USER",
            "required": true,
            "value": "django"
        },
        {
            "displayName": "Database User Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "description": "Relative path to Gunicorn configuration file (optional).",
            "displayName": "Application Configuration File Path",
            "name": "APP_CONFIG"
        },
        {
            "description": "Set this to a long random string.",
            "displayName": "Django Secret Key",
            "from": "[\\w]{50}",
            "generate": "expression",
            "name": "DJANGO_SECRET_KEY"
        },
        {
            "description": "The custom PyPi index URL",
            "displayName": "Custom PyPi Index URL",
            "name": "PIP_INDEX_URL",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsDjangoPostgresqlJsonBytes() ([]byte, error) {
	return _examplesQuickstartsDjangoPostgresqlJson, nil
}

func examplesQuickstartsDjangoPostgresqlJson() (*asset, error) {
	bytes, err := examplesQuickstartsDjangoPostgresqlJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/django-postgresql.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsHttpdJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "httpd-example",
        "template": "httpd-example"
    },
    "message": "The following service(s) have been created in your project: ${NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/httpd-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Apache HTTP Server (httpd) application that serves static content. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/httpd-ex/blob/master/README.md.",
            "iconClass": "icon-apache",
            "openshift.io/display-name": "Apache HTTP Server",
            "openshift.io/documentation-url": "https://github.com/openshift/httpd-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a static application served by Apache HTTP Server (httpd), including a build configuration and application deployment configuration.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,httpd",
            "template.openshift.io/bindable": "false"
        },
        "name": "httpd-example"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "httpd:2.4",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    },
                    {
                        "generic": {
                            "secret": "${GENERIC_WEBHOOK_SECRET}"
                        },
                        "type": "Generic"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Rolling"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "httpd-example",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "httpd-example"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "httpd-example"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/httpd-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the httpd service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "description": "A secret string used to configure the Generic webhook.",
            "displayName": "Generic Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GENERIC_WEBHOOK_SECRET"
        }
    ]
}`)

func examplesQuickstartsHttpdJsonBytes() ([]byte, error) {
	return _examplesQuickstartsHttpdJson, nil
}

func examplesQuickstartsHttpdJson() (*asset, error) {
	bytes, err := examplesQuickstartsHttpdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/httpd.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsNginxJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "nginx-example"
    },
    "message": "The following service(s) have been created in your project: ${NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nginx-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Nginx HTTP server and a reverse proxy (nginx) application that serves static content. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nginx-ex/blob/master/README.md.",
            "iconClass": "icon-nginx",
            "openshift.io/display-name": "Nginx HTTP server and a reverse proxy",
            "openshift.io/documentation-url": "https://github.com/sclorg/nginx-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a static application served by Nginx HTTP server and a reverse proxy (nginx), including a build configuration and application deployment configuration.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,nginx"
        },
        "name": "nginx-example"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "annotations": {
                    "template.openshift.io/expose-uri": "http://{.spec.host}{.spec.path}"
                },
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "nginx:${NGINX_VERSION}",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    },
                    {
                        "generic": {
                            "secret": "${GENERIC_WEBHOOK_SECRET}"
                        },
                        "type": "Generic"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Rolling"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "nginx-example",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "nginx-example"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "nginx-example"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Version of NGINX image to be used (1.12 by default).",
            "displayName": "NGINX Version",
            "name": "NGINX_VERSION",
            "required": true,
            "value": "1.12"
        },
        {
            "description": "Maximum amount of memory the container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/sclorg/nginx-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the nginx service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "description": "A secret string used to configure the Generic webhook.",
            "displayName": "Generic Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GENERIC_WEBHOOK_SECRET"
        }
    ]
}`)

func examplesQuickstartsNginxJsonBytes() ([]byte, error) {
	return _examplesQuickstartsNginxJson, nil
}

func examplesQuickstartsNginxJson() (*asset, error) {
	bytes, err := examplesQuickstartsNginxJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/nginx.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsNodejsMongodbPersistentJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "nodejs-mongo-persistent"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Node.js application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.",
            "iconClass": "icon-nodejs",
            "openshift.io/display-name": "Node.js + MongoDB",
            "openshift.io/documentation-url": "https://github.com/openshift/nodejs-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,nodejs",
            "template.openshift.io/bindable": "false"
        },
        "name": "nodejs-mongo-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "database-admin-password": "${DATABASE_ADMIN_PASSWORD}",
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "npm test"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "NPM_MIRROR",
                                "value": "${NPM_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "nodejs:6",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    },
                    {
                        "generic": {
                            "secret": "${GENERIC_WEBHOOK_SECRET}"
                        },
                        "type": "Generic"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "MONGODB_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "MONGODB_ADMIN_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-admin-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/pagecount",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "nodejs-mongo-persistent",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/pagecount",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "nodejs-mongo-persistent"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mongodb",
                        "port": 27017,
                        "targetPort": 27017
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MONGODB_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "MONGODB_ADMIN_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-admin-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 27017
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mongodb",
                                "ports": [
                                    {
                                        "containerPort": 27017
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                                        ]
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_MONGODB_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mongodb/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mongodb"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mongodb:3.2",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "nodejs-mongo-persistent"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Node.js container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the MongoDB container can use.",
            "displayName": "Memory Limit (MongoDB)",
            "name": "MEMORY_MONGODB_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/nodejs-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "description": "A secret string used to configure the Generic webhook.",
            "displayName": "Generic Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GENERIC_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mongodb"
        },
        {
            "description": "Username for MongoDB user that will be used for accessing the database.",
            "displayName": "MongoDB Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "DATABASE_USER"
        },
        {
            "description": "Password for the MongoDB user.",
            "displayName": "MongoDB Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Password for the database admin user.",
            "displayName": "Database Administrator Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_ADMIN_PASSWORD"
        },
        {
            "description": "The custom NPM mirror URL",
            "displayName": "Custom NPM Mirror URL",
            "name": "NPM_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsNodejsMongodbPersistentJsonBytes() ([]byte, error) {
	return _examplesQuickstartsNodejsMongodbPersistentJson, nil
}

func examplesQuickstartsNodejsMongodbPersistentJson() (*asset, error) {
	bytes, err := examplesQuickstartsNodejsMongodbPersistentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/nodejs-mongodb-persistent.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsNodejsMongodbJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "nodejs-mongodb-example",
        "template": "nodejs-mongodb-example"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Node.js application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
            "iconClass": "icon-nodejs",
            "openshift.io/display-name": "Node.js + MongoDB (Ephemeral)",
            "openshift.io/documentation-url": "https://github.com/openshift/nodejs-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,nodejs",
            "template.openshift.io/bindable": "false"
        },
        "name": "nodejs-mongodb-example"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "database-admin-password": "${DATABASE_ADMIN_PASSWORD}",
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "npm test"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "NPM_MIRROR",
                                "value": "${NPM_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "nodejs:6",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    },
                    {
                        "generic": {
                            "secret": "${GENERIC_WEBHOOK_SECRET}"
                        },
                        "type": "Generic"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "MONGODB_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "MONGODB_ADMIN_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-admin-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/pagecount",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 3
                                },
                                "name": "nodejs-mongodb-example",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/pagecount",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "nodejs-mongodb-example"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "mongodb",
                        "port": 27017,
                        "targetPort": 27017
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "MONGODB_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MONGODB_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "MONGODB_ADMIN_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-admin-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "initialDelaySeconds": 30,
                                    "tcpSocket": {
                                        "port": 27017
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "mongodb",
                                "ports": [
                                    {
                                        "containerPort": 27017
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-i",
                                            "-c",
                                            "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                                        ]
                                    },
                                    "initialDelaySeconds": 3,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_MONGODB_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/mongodb/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": ""
                                },
                                "name": "${DATABASE_SERVICE_NAME}-data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "mongodb"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "mongodb:3.2",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "nodejs-mongodb-example"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Node.js container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the MongoDB container can use.",
            "displayName": "Memory Limit (MongoDB)",
            "name": "MEMORY_MONGODB_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/nodejs-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "description": "A secret string used to configure the Generic webhook.",
            "displayName": "Generic Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GENERIC_WEBHOOK_SECRET"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "mongodb"
        },
        {
            "description": "Username for MongoDB user that will be used for accessing the database.",
            "displayName": "MongoDB Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "DATABASE_USER"
        },
        {
            "description": "Password for the MongoDB user.",
            "displayName": "MongoDB Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "sampledb"
        },
        {
            "description": "Password for the database admin user.",
            "displayName": "Database Administrator Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "DATABASE_ADMIN_PASSWORD"
        },
        {
            "description": "The custom NPM mirror URL",
            "displayName": "Custom NPM Mirror URL",
            "name": "NPM_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsNodejsMongodbJsonBytes() ([]byte, error) {
	return _examplesQuickstartsNodejsMongodbJson, nil
}

func examplesQuickstartsNodejsMongodbJson() (*asset, error) {
	bytes, err := examplesQuickstartsNodejsMongodbJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/nodejs-mongodb.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsRailsPostgresqlPersistentJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "rails-pgsql-persistent",
        "template": "rails-pgsql-persistent"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Rails application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.",
            "iconClass": "icon-ruby",
            "openshift.io/display-name": "Rails + PostgreSQL",
            "openshift.io/documentation-url": "https://github.com/openshift/rails-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a Rails application, including a build configuration, application deployment configuration, and database deployment configuration.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,ruby,rails",
            "template.openshift.io/bindable": "false"
        },
        "name": "rails-pgsql-persistent"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "application-password": "${APPLICATION_PASSWORD}",
                "application-user": "${APPLICATION_USER}",
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}",
                "keybase": "${SECRET_KEY_BASE}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "bundle exec rake test"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "RUBYGEM_MIRROR",
                                "value": "${RUBYGEM_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "ruby:2.3",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "recreateParams": {
                        "pre": {
                            "execNewPod": {
                                "command": [
                                    "./migrate-database.sh"
                                ],
                                "containerName": "${NAME}"
                            },
                            "failurePolicy": "Abort"
                        }
                    },
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "SECRET_KEY_BASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "keybase",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                                    },
                                    {
                                        "name": "POSTGRESQL_SHARED_BUFFERS",
                                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                                    },
                                    {
                                        "name": "APPLICATION_DOMAIN",
                                        "value": "${APPLICATION_DOMAIN}"
                                    },
                                    {
                                        "name": "APPLICATION_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "application-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "APPLICATION_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "application-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "RAILS_ENV",
                                        "value": "${RAILS_ENV}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/articles",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 10,
                                    "timeoutSeconds": 3
                                },
                                "name": "${NAME}",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/articles",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "${NAME}"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "PersistentVolumeClaim",
            "metadata": {
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "accessModes": [
                    "ReadWriteOnce"
                ],
                "resources": {
                    "requests": {
                        "storage": "${VOLUME_CAPACITY}"
                    }
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "postgresql",
                        "port": 5432,
                        "targetPort": 5432
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                                    },
                                    {
                                        "name": "POSTGRESQL_SHARED_BUFFERS",
                                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container",
                                            "--live"
                                        ]
                                    },
                                    "initialDelaySeconds": 120,
                                    "timeoutSeconds": 10
                                },
                                "name": "postgresql",
                                "ports": [
                                    {
                                        "containerPort": 5432
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/pgsql/data",
                                        "name": "${DATABASE_SERVICE_NAME}-data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "name": "${DATABASE_SERVICE_NAME}-data",
                                "persistentVolumeClaim": {
                                    "claimName": "${DATABASE_SERVICE_NAME}"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "postgresql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "postgresql:9.5",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "rails-pgsql-persistent"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Rails container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the PostgreSQL container can use.",
            "displayName": "Memory Limit (PostgreSQL)",
            "name": "MEMORY_POSTGRESQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Volume space available for data, e.g. 512Mi, 2Gi",
            "displayName": "Volume Capacity",
            "name": "VOLUME_CAPACITY",
            "required": true,
            "value": "1Gi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/rails-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Rails service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "description": "Your secret key for verifying the integrity of signed cookies.",
            "displayName": "Secret Key",
            "from": "[a-z0-9]{127}",
            "generate": "expression",
            "name": "SECRET_KEY_BASE"
        },
        {
            "description": "The application user that is used within the sample application to authorize access on pages.",
            "displayName": "Application Username",
            "name": "APPLICATION_USER",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "The application password that is used within the sample application to authorize access on pages.",
            "displayName": "Application Password",
            "name": "APPLICATION_PASSWORD",
            "required": true,
            "value": "secret"
        },
        {
            "description": "Environment under which the sample application will run. Could be set to production, development or test.",
            "displayName": "Rails Environment",
            "name": "RAILS_ENV",
            "required": true,
            "value": "production"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "postgresql"
        },
        {
            "displayName": "Database Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "DATABASE_USER"
        },
        {
            "displayName": "Database Password",
            "from": "[a-zA-Z0-9]{8}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "root"
        },
        {
            "displayName": "Maximum Database Connections",
            "name": "POSTGRESQL_MAX_CONNECTIONS",
            "value": "100"
        },
        {
            "displayName": "Shared Buffer Amount",
            "name": "POSTGRESQL_SHARED_BUFFERS",
            "value": "12MB"
        },
        {
            "description": "The custom RubyGems mirror URL",
            "displayName": "Custom RubyGems Mirror URL",
            "name": "RUBYGEM_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsRailsPostgresqlPersistentJsonBytes() ([]byte, error) {
	return _examplesQuickstartsRailsPostgresqlPersistentJson, nil
}

func examplesQuickstartsRailsPostgresqlPersistentJson() (*asset, error) {
	bytes, err := examplesQuickstartsRailsPostgresqlPersistentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/rails-postgresql-persistent.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesQuickstartsRailsPostgresqlJson = []byte(`{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "app": "rails-postgresql-example",
        "template": "rails-postgresql-example"
    },
    "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.",
    "metadata": {
        "annotations": {
            "description": "An example Rails application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
            "iconClass": "icon-ruby",
            "openshift.io/display-name": "Rails + PostgreSQL (Ephemeral)",
            "openshift.io/documentation-url": "https://github.com/openshift/rails-ex",
            "openshift.io/long-description": "This template defines resources needed to develop a Rails application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://access.redhat.com",
            "tags": "quickstart,ruby,rails",
            "template.openshift.io/bindable": "false"
        },
        "name": "rails-postgresql-example"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${NAME}"
            },
            "stringData": {
                "application-password": "${APPLICATION_PASSWORD}",
                "application-user": "${APPLICATION_USER}",
                "database-password": "${DATABASE_PASSWORD}",
                "database-user": "${DATABASE_USER}",
                "keybase": "${SECRET_KEY_BASE}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes and load balances the application pods",
                    "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
                },
                "name": "${NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "web",
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Route",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
                "host": "${APPLICATION_DOMAIN}",
                "to": {
                    "kind": "Service",
                    "name": "${NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "ImageStream",
            "metadata": {
                "annotations": {
                    "description": "Keeps track of changes in the application image"
                },
                "name": "${NAME}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "BuildConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to build the application",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "output": {
                    "to": {
                        "kind": "ImageStreamTag",
                        "name": "${NAME}:latest"
                    }
                },
                "postCommit": {
                    "script": "bundle exec rake test"
                },
                "source": {
                    "contextDir": "${CONTEXT_DIR}",
                    "git": {
                        "ref": "${SOURCE_REPOSITORY_REF}",
                        "uri": "${SOURCE_REPOSITORY_URL}"
                    },
                    "type": "Git"
                },
                "strategy": {
                    "sourceStrategy": {
                        "env": [
                            {
                                "name": "RUBYGEM_MIRROR",
                                "value": "${RUBYGEM_MIRROR}"
                            }
                        ],
                        "from": {
                            "kind": "ImageStreamTag",
                            "name": "ruby:2.3",
                            "namespace": "${NAMESPACE}"
                        }
                    },
                    "type": "Source"
                },
                "triggers": [
                    {
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    },
                    {
                        "github": {
                            "secret": "${GITHUB_WEBHOOK_SECRET}"
                        },
                        "type": "GitHub"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the application server",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${NAME}"
                },
                "strategy": {
                    "recreateParams": {
                        "pre": {
                            "execNewPod": {
                                "command": [
                                    "./migrate-database.sh"
                                ],
                                "containerName": "${NAME}"
                            },
                            "failurePolicy": "Abort"
                        }
                    },
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${NAME}"
                        },
                        "name": "${NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "DATABASE_SERVICE_NAME",
                                        "value": "${DATABASE_SERVICE_NAME}"
                                    },
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "SECRET_KEY_BASE",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "keybase",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                                    },
                                    {
                                        "name": "POSTGRESQL_SHARED_BUFFERS",
                                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                                    },
                                    {
                                        "name": "APPLICATION_DOMAIN",
                                        "value": "${APPLICATION_DOMAIN}"
                                    },
                                    {
                                        "name": "APPLICATION_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "application-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "APPLICATION_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "application-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "RAILS_ENV",
                                        "value": "${RAILS_ENV}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/articles",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 10,
                                    "timeoutSeconds": 3
                                },
                                "name": "${NAME}",
                                "ports": [
                                    {
                                        "containerPort": 8080
                                    }
                                ],
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/articles",
                                        "port": 8080
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_LIMIT}"
                                    }
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "${NAME}"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "${NAME}:latest"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Exposes the database server"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "ports": [
                    {
                        "name": "postgresql",
                        "port": 5432,
                        "targetPort": 5432
                    }
                ],
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "DeploymentConfig",
            "metadata": {
                "annotations": {
                    "description": "Defines how to deploy the database",
                    "template.alpha.openshift.io/wait-for-ready": "true"
                },
                "name": "${DATABASE_SERVICE_NAME}"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "name": "${DATABASE_SERVICE_NAME}"
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "name": "${DATABASE_SERVICE_NAME}"
                        },
                        "name": "${DATABASE_SERVICE_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "POSTGRESQL_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-user",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "database-password",
                                                "name": "${NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_DATABASE",
                                        "value": "${DATABASE_NAME}"
                                    },
                                    {
                                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                                    },
                                    {
                                        "name": "POSTGRESQL_SHARED_BUFFERS",
                                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                                    }
                                ],
                                "image": " ",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container",
                                            "--live"
                                        ]
                                    },
                                    "initialDelaySeconds": 120,
                                    "timeoutSeconds": 10
                                },
                                "name": "postgresql",
                                "ports": [
                                    {
                                        "containerPort": 5432
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/usr/libexec/check-container"
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/lib/pgsql/data",
                                        "name": "data"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "data"
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "postgresql"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "name": "postgresql:9.5",
                                "namespace": "${NAMESPACE}"
                            }
                        },
                        "type": "ImageChange"
                    },
                    {
                        "type": "ConfigChange"
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name assigned to all of the frontend objects defined in this template.",
            "displayName": "Name",
            "name": "NAME",
            "required": true,
            "value": "rails-postgresql-example"
        },
        {
            "description": "The OpenShift Namespace where the ImageStream resides.",
            "displayName": "Namespace",
            "name": "NAMESPACE",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "Maximum amount of memory the Rails container can use.",
            "displayName": "Memory Limit",
            "name": "MEMORY_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "Maximum amount of memory the PostgreSQL container can use.",
            "displayName": "Memory Limit (PostgreSQL)",
            "name": "MEMORY_POSTGRESQL_LIMIT",
            "required": true,
            "value": "512Mi"
        },
        {
            "description": "The URL of the repository with your application source code.",
            "displayName": "Git Repository URL",
            "name": "SOURCE_REPOSITORY_URL",
            "required": true,
            "value": "https://github.com/openshift/rails-ex.git"
        },
        {
            "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
            "displayName": "Git Reference",
            "name": "SOURCE_REPOSITORY_REF"
        },
        {
            "description": "Set this to the relative path to your project if it is not in the root of your repository.",
            "displayName": "Context Directory",
            "name": "CONTEXT_DIR"
        },
        {
            "description": "The exposed hostname that will route to the Rails service, if left blank a value will be defaulted.",
            "displayName": "Application Hostname",
            "name": "APPLICATION_DOMAIN",
            "value": ""
        },
        {
            "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
            "displayName": "GitHub Webhook Secret",
            "from": "[a-zA-Z0-9]{40}",
            "generate": "expression",
            "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
            "description": "Your secret key for verifying the integrity of signed cookies.",
            "displayName": "Secret Key",
            "from": "[a-z0-9]{127}",
            "generate": "expression",
            "name": "SECRET_KEY_BASE"
        },
        {
            "description": "The application user that is used within the sample application to authorize access on pages.",
            "displayName": "Application Username",
            "name": "APPLICATION_USER",
            "required": true,
            "value": "openshift"
        },
        {
            "description": "The application password that is used within the sample application to authorize access on pages.",
            "displayName": "Application Password",
            "name": "APPLICATION_PASSWORD",
            "required": true,
            "value": "secret"
        },
        {
            "description": "Environment under which the sample application will run. Could be set to production, development or test.",
            "displayName": "Rails Environment",
            "name": "RAILS_ENV",
            "required": true,
            "value": "production"
        },
        {
            "displayName": "Database Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "required": true,
            "value": "postgresql"
        },
        {
            "displayName": "Database Username",
            "from": "user[A-Z0-9]{3}",
            "generate": "expression",
            "name": "DATABASE_USER"
        },
        {
            "displayName": "Database Password",
            "from": "[a-zA-Z0-9]{8}",
            "generate": "expression",
            "name": "DATABASE_PASSWORD"
        },
        {
            "displayName": "Database Name",
            "name": "DATABASE_NAME",
            "required": true,
            "value": "root"
        },
        {
            "displayName": "Maximum Database Connections",
            "name": "POSTGRESQL_MAX_CONNECTIONS",
            "value": "100"
        },
        {
            "displayName": "Shared Buffer Amount",
            "name": "POSTGRESQL_SHARED_BUFFERS",
            "value": "12MB"
        },
        {
            "description": "The custom RubyGems mirror URL",
            "displayName": "Custom RubyGems Mirror URL",
            "name": "RUBYGEM_MIRROR",
            "value": ""
        }
    ]
}`)

func examplesQuickstartsRailsPostgresqlJsonBytes() ([]byte, error) {
	return _examplesQuickstartsRailsPostgresqlJson, nil
}

func examplesQuickstartsRailsPostgresqlJson() (*asset, error) {
	bytes, err := examplesQuickstartsRailsPostgresqlJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/quickstarts/rails-postgresql.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesHeapsterHeapsterStandaloneYaml = []byte(`kind: Template
apiVersion: v1
metadata:
  name: heapster-standalone
  annotations:
    "openshift.io/display-name": Heapster Metrics (Standalone)
    description: |
      A simple metrics solution for an OpenShift cluster. Expects to be installed in the 'kube-system' namespace.
    iconClass: fa fa-cogs
    tags: "metrics,monitoring,heapster"
  labels:
    metrics-infra: heapster
parameters:
- description: Internal URL for the master, for authentication retrieval
  name: MASTER_URL
  value: https://kubernetes.default.svc
- description: Specify prefix for metrics components; e.g. for "openshift/origin-metrics-deployer:v1.1",
    set prefix "openshift/origin-"
  name: IMAGE_PREFIX
  value: openshift/origin-
- description: Specify version for metrics components; e.g. for "openshift/origin-metrics-deployer:v1.1",
    set version "v1.1"
  name: IMAGE_VERSION
  value: "latest"
- description: "How often metrics should be gathered. Defaults value of '15s' for 15 seconds"
  name: METRIC_RESOLUTION
  value: "15s"
- description: How long in seconds we should wait until Heapster starts up before attempting a restart
  name: STARTUP_TIMEOUT
  value: "500"
- description: The namespace to instantiate heapster under. Defaults to 'kube-system'.
  name: NAMESPACE
  value: kube-system
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: heapster
    namespace: "${NAMESPACE}"
    labels:
      metrics-infra: support
  secrets:
  - name: heapster-secrets
- apiVersion: v1
  kind: ClusterRoleBinding
  metadata:
    name: heapster-cluster-reader
  roleRef:
    name: cluster-reader
  subjects:
  - kind: ServiceAccount
    name: heapster
    namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: Service
  metadata:
    name: heapster
    namespace: "${NAMESPACE}"
    labels:
      metrics-infra: heapster
      name: heapster
    annotations:
      "service.alpha.openshift.io/serving-cert-secret-name": heapster-secrets
  spec:
    selector:
      name: heapster
    ports:
    - port: 443
      targetPort: https
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: heapster
    namespace: "${NAMESPACE}"
    labels:
      metrics-infra: heapster
      name: heapster
  spec:
    selector:
      name: heapster
    replicas: 1
    template:
      version: v1
      metadata:
        labels:
          metrics-infra: heapster
          name: heapster
      spec:
        containers:
        - image: "${IMAGE_PREFIX}metrics-heapster:${IMAGE_VERSION}"
          name: heapster
          ports:
          - name: https
            containerPort: 8082
          command:
          - "heapster-wrapper.sh"
          - "--source=kubernetes:${MASTER_URL}?useServiceAccount=true&kubeletHttps=true&kubeletPort=10250"
          - "--tls_cert=/secrets/tls.crt"
          - "--tls_key=/secrets/tls.key"
          - "--tls_client_ca=/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
          - "--allowed_users=system:master-proxy"
          - "--metric_resolution=${METRIC_RESOLUTION}"
          env:
          - name: STARTUP_TIMEOUT
            value: ${STARTUP_TIMEOUT}
          volumeMounts:
          - name: heapster-secrets
            mountPath: "/secrets"
        volumes:
        - name: heapster-secrets
          secret:
            secretName: heapster-secrets
        serviceAccount: heapster

`)

func examplesHeapsterHeapsterStandaloneYamlBytes() ([]byte, error) {
	return _examplesHeapsterHeapsterStandaloneYaml, nil
}

func examplesHeapsterHeapsterStandaloneYaml() (*asset, error) {
	bytes, err := examplesHeapsterHeapsterStandaloneYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/heapster/heapster-standalone.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesPrometheusPrometheusYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: prometheus
  annotations:
    "openshift.io/display-name": Prometheus
    description: |
      A monitoring solution for an OpenShift cluster - collect and gather metrics and alerts from nodes, services, and the infrastructure. This is a tech preview feature.
    iconClass: fa fa-cogs
    tags: "monitoring,prometheus, alertmanager,time-series"
parameters:
- description: The namespace to instantiate prometheus under. Defaults to 'kube-system'.
  name: NAMESPACE
  value: kube-system
- description: The location of the proxy image
  name: IMAGE_PROXY
  value: openshift/oauth-proxy:v1.0.0
- description: The location of the prometheus image
  name: IMAGE_PROMETHEUS
  value: openshift/prometheus:v2.1.0
- description: The location of the alertmanager image
  name: IMAGE_ALERTMANAGER
  value: openshift/prometheus-alertmanager:v0.14.0
- description: The location of alert-buffer image
  name: IMAGE_ALERT_BUFFER
  value: openshift/prometheus-alert-buffer:v0.0.2
- description: The session secret for the proxy
  name: SESSION_SECRET
  generate: expression
  from: "[a-zA-Z0-9]{43}"

objects:
# Authorize the prometheus service account to read data about the cluster
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus
    namespace: "${NAMESPACE}"
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.prom: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"prometheus"}}'
      serviceaccounts.openshift.io/oauth-redirectreference.alerts: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"alerts"}}'
      serviceaccounts.openshift.io/oauth-redirectreference.alertmanager: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"alertmanager"}}'

# Create a service account for accessing prometheus data
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus-reader
    namespace: "${NAMESPACE}"

# Create a service account for prometheus to use to scrape other infrastructure components
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus-scraper
    namespace: "${NAMESPACE}"

- apiVersion: v1
  kind: Secret
  metadata:
    name: prometheus-scraper
    namespace: "${NAMESPACE}"
    annotations:
      kubernetes.io/service-account.name: prometheus-scraper
  type: kubernetes.io/service-account-token

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: prometheus-scraper
  rules:
  - apiGroups:
    - route.openshift.io
    resources:
    - routers/metrics
    verbs:
    - get
  - apiGroups:
    - image.openshift.io
    resources:
    - registry/metrics
    verbs:
    - get

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: prometheus-scraper
  roleRef:
    name: prometheus-scraper
  subjects:
  - kind: ServiceAccount
    name: prometheus-scraper
    namespace: "${NAMESPACE}"

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: prometheus-cluster-reader
  roleRef:
    name: cluster-reader
  subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: "${NAMESPACE}"

- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: prometheus-reader
    namespace: "${NAMESPACE}"
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: prometheus-reader
    namespace: "${NAMESPACE}"

# Create a fully end-to-end TLS connection to the prometheus proxy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: prometheus
    tls:
      termination: Reencrypt
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/scheme: https
      service.alpha.openshift.io/serving-cert-secret-name: prometheus-tls
    labels:
      name: prometheus
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: prometheus
      port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      app: prometheus
- apiVersion: v1
  kind: Secret
  metadata:
    name: prometheus-proxy
    namespace: "${NAMESPACE}"
  stringData:
    session_secret: "${SESSION_SECRET}="

# Create a fully end-to-end TLS connection to the alert proxy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: alerts
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: alerts
    tls:
      termination: Reencrypt
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: alerts-tls
    labels:
      name: alerts
    name: alerts
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: alerts
      port: 443
      protocol: TCP
      targetPort: 9443
    selector:
      app: prometheus
- apiVersion: v1
  kind: Secret
  metadata:
    name: alerts-proxy
    namespace: "${NAMESPACE}"
  stringData:
    session_secret: "${SESSION_SECRET}="

# Create a fully end-to-end TLS connection to the alertmanager proxy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: alertmanager
    tls:
      termination: Reencrypt
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: alertmanager-tls
    labels:
      name: alertmanager
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: alertmanager
      port: 443
      protocol: TCP
      targetPort: 10443
    selector:
      app: prometheus
- apiVersion: v1
  kind: Secret
  metadata:
    name: alertmanager-proxy
    namespace: "${NAMESPACE}"
  stringData:
    session_secret: "${SESSION_SECRET}="

- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    labels:
      app: prometheus
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    updateStrategy:
      type: RollingUpdate
    podManagementPolicy: Parallel
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        labels:
          app: prometheus
        name: prometheus
      spec:
        serviceAccountName: prometheus
        containers:
        # Deploy Prometheus behind an oauth proxy
        - name: prom-proxy
          image: ${IMAGE_PROXY}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8443
            name: web
          args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -client-id=system:serviceaccount:${NAMESPACE}:prometheus
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "resourceName": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "resourceName": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -skip-auth-regex=^/metrics
          volumeMounts:
          - mountPath: /etc/tls/private
            name: prometheus-tls-secret
          - mountPath: /etc/proxy/secrets
            name: prometheus-proxy-secret
          - mountPath: /prometheus
            name: prometheus-data

        - name: prometheus
          args:
          - --storage.tsdb.retention=6h
          - --config.file=/etc/prometheus/prometheus.yml
          - --web.listen-address=localhost:9090
          image: ${IMAGE_PROMETHEUS}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - |-
                set -euo pipefail;
                touch /tmp/prometheusconfig.hash;
                if [[ $(find /etc/prometheus -type f | sort | xargs md5sum | md5sum) != $(cat /tmp/prometheusconfig.hash) ]]; then
                  find /etc/prometheus -type f | sort | xargs md5sum | md5sum > /tmp/prometheusconfig.hash;
                  kill -HUP 1;
                fi
            initialDelaySeconds: 60
            periodSeconds: 60
          volumeMounts:
          - mountPath: /etc/prometheus
            name: prometheus-config
          - mountPath: /prometheus
            name: prometheus-data
          - mountPath: /var/run/secrets/kubernetes.io/scraper
            name: prometheus-scraper-secret

        # Deploy alertmanager behind prometheus-alert-buffer behind an oauth proxy
        # use http port=4190 and https port=9943 to differ from prom-proxy
        - name: alerts-proxy
          image: ${IMAGE_PROXY}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9443
            name: web
          args:
          - -provider=openshift
          - -https-address=:9443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9099
          - -client-id=system:serviceaccount:${NAMESPACE}:prometheus
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "resourceName": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "resourceName": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -skip-auth-regex=^/metrics
          volumeMounts:
          - mountPath: /etc/tls/private
            name: alerts-tls-secret
          - mountPath: /etc/proxy/secrets
            name: alerts-proxy-secrets

        - name: alert-buffer
          args:
          - --storage-path=/alert-buffer/messages.db
          image: ${IMAGE_ALERT_BUFFER}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /alert-buffer
            name: alerts-data

        - name: alertmanager-proxy
          image: ${IMAGE_PROXY}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 10443
            name: web
          args:
          - -provider=openshift
          - -https-address=:10443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9093
          - -client-id=system:serviceaccount:${NAMESPACE}:prometheus
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "resourceName": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "resourceName": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -skip-auth-regex=^/metrics
          volumeMounts:
          - mountPath: /etc/tls/private
            name: alertmanager-tls-secret
          - mountPath: /etc/proxy/secrets
            name: alertmanager-proxy-secret

        - name: alertmanager
          args:
          - --config.file=/etc/alertmanager/alertmanager.yml
          image: ${IMAGE_ALERTMANAGER}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /etc/alertmanager
            name: alertmanager-config
          - mountPath: /alertmanager
            name: alertmanager-data

        restartPolicy: Always
        volumes:

        - name: prometheus-config
          configMap:
            defaultMode: 420
            name: prometheus
        - name: prometheus-scraper-secret
          secret:
            secretName: prometheus-scraper
        - name: prometheus-proxy-secret
          secret:
            secretName: prometheus-proxy
        - name: prometheus-tls-secret
          secret:
            secretName: prometheus-tls
        - name: prometheus-data
          emptyDir: {}

        - name: alertmanager-config
          configMap:
            defaultMode: 420
            name: alertmanager
        - name: alertmanager-tls-secret
          secret:
            secretName: alertmanager-tls
        - name: alertmanager-proxy-secret
          secret:
            secretName: alertmanager-proxy

        - name: alerts-proxy-secrets
          secret:
            secretName: alerts-proxy
        - name: alerts-tls-secret
          secret:
            secretName: alerts-tls
        - name: alertmanager-data
          emptyDir: {}
        - name: alerts-data
          emptyDir: {}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prometheus
    namespace: "${NAMESPACE}"
  data:
    alerting.rules: |
      groups:
      - name: example-rules
        interval: 30s # defaults to global interval
        rules:
        - alert: Node Down
          expr: up{job="kubernetes-nodes"} == 0
          annotations:
            miqTarget: "ContainerNode"
            severity: "HIGH"
            message: "{{$labels.instance}} is down"

    recording.rules: |
      groups:
      - name: aggregate_container_resources
        rules:
        - record: container_cpu_usage_rate
          expr: sum without (cpu) (rate(container_cpu_usage_seconds_total[5m]))
        - record: container_memory_rss_by_type
          expr: container_memory_rss{id=~"/|/system.slice|/kubepods.slice"} > 0
        - record: container_cpu_usage_percent_by_host
          expr: sum by (hostname,type)(rate(container_cpu_usage_seconds_total{id="/"}[5m])) / on (hostname,type) machine_cpu_cores
        - record: apiserver_request_count_rate_by_resources
          expr: sum without (client,instance,contentType) (rate(apiserver_request_count[5m]))

    prometheus.yml: |
      rule_files:
        - '*.rules'

      # A scrape configuration for running Prometheus on a Kubernetes cluster.
      # This uses separate scrape configs for cluster components (i.e. API server, node)
      # and services to allow each to use different authentication configs.
      #
      # Kubernetes labels will be added as Prometheus labels on metrics via the
      # `+"`"+`labelmap`+"`"+` relabeling action.

      # Scrape config for API servers.
      #
      # Kubernetes exposes API servers as endpoints to the default/kubernetes
      # service so this uses `+"`"+`endpoints`+"`"+` role and uses relabelling to only keep
      # the endpoints associated with the default/kubernetes service using the
      # default named port `+"`"+`https`+"`"+`. This works for single API server deployments as
      # well as HA API server deployments.
      scrape_configs:
      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - default

        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        # Keep only the default/kubernetes service endpoints for the https port. This
        # will add targets for each API server which Kubernetes adds an endpoint to
        # the default/kubernetes service.
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: kubernetes;https

      # Scrape config for controllers.
      #
      # Each master node exposes a /metrics endpoint on :8444 that contains operational metrics for
      # the controllers.
      #
      # TODO: move this to a pure endpoints based metrics gatherer when controllers are exposed via
      #       endpoints.
      - job_name: 'kubernetes-controllers'

        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - default

        # Keep only the default/kubernetes service endpoints for the https port, and then
        # set the port to 8444. This is the default configuration for the controllers on OpenShift
        # masters.
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: kubernetes;https
        - source_labels: [__address__]
          action: replace
          target_label: __address__
          regex: (.+)(?::\d+)
          replacement: $1:8444

      # Scrape config for nodes.
      #
      # Each node exposes a /metrics endpoint that contains operational metrics for
      # the Kubelet and other components.
      - job_name: 'kubernetes-nodes'

        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        # Drop a very high cardinality metric that is incorrect in 3.7. It will be
        # fixed in 3.9.
        metric_relabel_configs:
        - source_labels: [__name__]
          action: drop
          regex: 'openshift_sdn_pod_(setup|teardown)_latency(.*)'

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      # Scrape config for cAdvisor.
      #
      # Beginning in Kube 1.7, each node exposes a /metrics/cadvisor endpoint that
      # reports container metrics for each running pod. Scrape those by default.
      - job_name: 'kubernetes-cadvisor'

        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        metrics_path: /metrics/cadvisor

        kubernetes_sd_configs:
        - role: node

        # Exclude a set of high cardinality metrics that can contribute to significant
        # memory use in large clusters. These can be selectively enabled as necessary
        # for medium or small clusters.
        metric_relabel_configs:
        - source_labels: [__name__]
          action: drop
          regex: 'container_(cpu_user_seconds_total|cpu_cfs_periods_total|memory_usage_bytes|memory_swap|memory_working_set_bytes|memory_cache|last_seen|fs_(read_seconds_total|write_seconds_total|sector_(.*)|io_(.*)|reads_merged_total|writes_merged_total)|tasks_state|memory_failcnt|memory_failures_total|spec_memory_swap_limit_bytes|fs_(.*)_bytes_total|spec_(.*))'

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `+"`"+`prometheus.io/scrape`+"`"+`: Only scrape services that have a value of `+"`"+`true`+"`"+`
      # * `+"`"+`prometheus.io/scheme`+"`"+`: If the metrics endpoint is secured then you will need
      # to set this to `+"`"+`https`+"`"+` & most likely set the `+"`"+`tls_config`+"`"+` of the scrape config.
      # * `+"`"+`prometheus.io/path`+"`"+`: If the metrics path is not `+"`"+`/metrics`+"`"+` override this.
      # * `+"`"+`prometheus.io/port`+"`"+`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # TODO: this should be per target
          insecure_skip_verify: true

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        # only scrape infrastructure components
        - source_labels: [__meta_kubernetes_namespace]
          action: keep
          regex: 'default|logging|metrics|kube-.+|openshift|openshift-.+'
        # drop infrastructure components managed by other scrape targets
        - source_labels: [__meta_kubernetes_service_name]
          action: drop
          regex: 'prometheus-node-exporter'
        # only those that have requested scraping
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: (.+)(?::\d+);(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

      # Scrape config for node-exporter, which is expected to be running on port 9100.
      - job_name: 'kubernetes-nodes-exporter'

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt

        kubernetes_sd_configs:
        - role: node

        metric_relabel_configs:
        - source_labels: [__name__]
          action: drop
          regex: 'node_cpu|node_(disk|scrape_collector)_.+'
        # preserve a subset of the network, netstat, vmstat, and filesystem series
        - source_labels: [__name__]
          action: replace
          regex: '(node_(netstat_Ip_.+|vmstat_(nr|thp)_.+|filesystem_(free|size|device_error)|network_(transmit|receive)_(drop|errs)))'
          target_label: __name__
          replacement: renamed_$1
        - source_labels: [__name__]
          action: drop
          regex: 'node_(netstat|vmstat|filesystem|network)_.+'
        - source_labels: [__name__]
          action: replace
          regex: 'renamed_(.+)'
          target_label: __name__
          replacement: $1
        # drop any partial expensive series
        - source_labels: [__name__, device]
          action: drop
          regex: 'node_network_.+;veth.+'
        - source_labels: [__name__, mountpoint]
          action: drop
          regex: 'node_filesystem_(free|size|device_error);([^/].*|/.+)'

        relabel_configs:
        - source_labels: [__address__]
          regex: '(.*):10250'
          replacement: '${1}:9100'
          target_label: __address__
        - source_labels: [__meta_kubernetes_node_label_kubernetes_io_hostname]
          target_label: __instance__
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      # TODO: auto-generate these sections, or add a dynamic infrastructure scraper
      # Scrape config for the template service broker
      - job_name: 'openshift-template-service-broker'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          server_name: apiserver.openshift-template-service-broker.svc
        bearer_token_file: /var/run/secrets/kubernetes.io/scraper/token
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - openshift-template-service-broker

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: api-server;https

      # Scrape config for the router
      - job_name: 'openshift-router'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          server_name: router.default.svc
        bearer_token_file: /var/run/secrets/kubernetes.io/scraper/token
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - default
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: router;1936-tcp

      alerting:
        alertmanagers:
        - scheme: http
          static_configs:
          - targets:
            - "localhost:9093"

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: alertmanager
    namespace: "${NAMESPACE}"
  data:
    alertmanager.yml: |
      global:

      # The root route on which each incoming alert enters.
      route:
        # default route if none match
        receiver: alert-buffer-wh

        # The labels by which incoming alerts are grouped together. For example,
        # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
        # be batched into a single group.
        # TODO:
        group_by: []

        # All the above attributes are inherited by all child routes and can
        # overwritten on each.

      receivers:
      - name: alert-buffer-wh
        webhook_configs:
        - url: http://localhost:9099/topics/alerts
`)

func examplesPrometheusPrometheusYamlBytes() ([]byte, error) {
	return _examplesPrometheusPrometheusYaml, nil
}

func examplesPrometheusPrometheusYaml() (*asset, error) {
	bytes, err := examplesPrometheusPrometheusYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/prometheus/prometheus.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesServiceCatalogServiceCatalogYaml = []byte(`apiVersion: v1
kind: Template
metadata:
  name: service-catalog
objects:

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRole
  metadata:
    name: servicecatalog-serviceclass-viewer
  rules:
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterserviceclasses
    - clusterserviceplans
    verbs:
    - list
    - watch
    - get

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: servicecatalog-serviceclass-viewer-binding
  roleRef:
    name: servicecatalog-serviceclass-viewer
  groupNames:
  - system:authenticated

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: service-catalog-controller

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: service-catalog-apiserver

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRole
  metadata:
    name: sar-creator
  rules:
  - apiGroups:
    - ""
    resources:
    - subjectaccessreviews.authorization.k8s.io
    verbs:
    - create

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-sar-creator-binding
  roleRef:
    name: sar-creator
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: kube-service-catalog

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRole
  metadata:
    name: namespace-viewer
  rules:
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - list
    - watch
    - get

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-namespace-viewer-binding
  roleRef:
    name: namespace-viewer
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: kube-service-catalog

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-controller-namespace-viewer-binding
  roleRef:
    name: namespace-viewer
  subjects:
  - kind: ServiceAccount
    name: service-catalog-controller
    namespace: kube-service-catalog

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRole
  metadata:
    name: service-catalog-controller
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - create
    - update
    - patch
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterservicebrokers/status
    - clusterserviceclasses/status
    - clusterserviceplans/status
    - serviceinstances/status
    - servicebindings/status
    - servicebindings/finalizers
    - serviceinstances/reference
    verbs:
    - update
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterservicebrokers
    - serviceinstances
    - servicebindings
    verbs:
    - list
    - get
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - patch
    - create
  - apiGroups:
    - servicecatalog.k8s.io
    resources:
    - clusterserviceclasses
    - clusterserviceplans
    verbs:
    - create
    - delete
    - update
    - patch
    - get
    - list
    - watch
  - apiGroups:
    - settings.k8s.io
    resources:
    - podpresets
    verbs:
    - create
    - update
    - delete
    - get
    - list
    - watch

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: service-catalog-controller-binding
  roleRef:
    name: service-catalog-controller
  subjects:
  - kind: ServiceAccount
    name: service-catalog-controller
    namespace: kube-service-catalog
  
- apiVersion: authorization.openshift.io/v1
  kind: Role
  metadata:
    name: endpoint-accessor
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - list
    - watch
    - get
    - create
    - update

- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: endpointer-accessor-binding
  roleRef:
    name: endpoint-accessor
    namespace: kube-service-catalog
  subjects:
  - kind: ServiceAccount
    namespace: kube-service-catalog
    name: service-catalog-controller

- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: extension-apiserver-authentication-reader-binding
    namespace: ${KUBE_SYSTEM_NAMESPACE}
  roleRef:
    name: extension-apiserver-authentication-reader
    namespace: ${KUBE_SYSTEM_NAMESPACE}
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: kube-service-catalog

- apiVersion: authorization.openshift.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: system:auth-delegator-binding
  roleRef:
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    name: service-catalog-apiserver
    namespace: kube-service-catalog


- kind: Deployment
  apiVersion: extensions/v1beta1
  metadata:
    labels:
      app: apiserver
    name: apiserver
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: apiserver
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: apiserver
      spec:
        serviceAccountName: service-catalog-apiserver
        containers:
        - command: 
          - service-catalog
          args:
          - apiserver
          - --admission-control
          - KubernetesNamespaceLifecycle,DefaultServicePlan,ServiceBindingsLifecycle,ServicePlanChangeValidator,BrokerAuthSarCheck
          - --storage-type
          - etcd
          - --secure-port
          - "6443"
          - --etcd-servers
          - http://localhost:2379
          - -v
          - "10"
          - --cors-allowed-origins
          - ${CORS_ALLOWED_ORIGIN}
          - --feature-gates
          - OriginatingIdentity=true
          image: ${SERVICE_CATALOG_IMAGE}
          imagePullPolicy: IfNotPresent
          name: apiserver
          ports:
          - containerPort: 6443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/run/kubernetes-service-catalog
            name: apiserver-ssl
            readOnly: true
        - env:
          - name: ETCD_DATA_DIR
            value: /data-dir
          image: quay.io/coreos/etcd
          imagePullPolicy: IfNotPresent
          name: etcd
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /data-dir
            name: data-dir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: apiserver-ssl
          secret:
            defaultMode: 420
            secretName: apiserver-ssl
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
        - emptyDir: {}
          name: data-dir

- kind: Service
  apiVersion: v1
  metadata:
    name: apiserver
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: 'apiserver-ssl'
  spec:
    type: ClusterIP
    clusterIP: ${SERVICE_CATALOG_SERVICE_IP}
    ports:
    - name: secure
      port: 443
      protocol: TCP
      targetPort: 6443
    selector:
      app: apiserver
    sessionAffinity: None

- kind: Deployment
  apiVersion: extensions/v1beta1
  metadata:
    labels:
      app: controller-manager
    name: controller-manager
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: controller-manager
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: controller-manager
      spec:
        serviceAccountName: service-catalog-controller
        containers:
        - command: 
          - service-catalog
          args:
          - controller-manager
          - -v
          - "5"
          - --leader-election-namespace
          - kube-service-catalog
          - --broker-relist-interval
          - "5m"
          - --feature-gates
          - OriginatingIdentity=true
          - --feature-gates
          - AsyncBindingOperations=true
          image: ${SERVICE_CATALOG_IMAGE}
          imagePullPolicy: IfNotPresent
          name: controller-manager
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /etc/service-catalog-ssl
            name: service-catalog-ssl
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: service-catalog-ssl
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: apiserver.crt
            secretName: apiserver-ssl
- kind: Service
  apiVersion: v1
  metadata:
    name: controller-manager
  spec:
    ports:
    - port: 6443
      protocol: TCP
      targetPort: 6443
    selector:
      app: controller-manager
    sessionAffinity: None
    type: ClusterIP

parameters:
- description: CORS allowed origin for the API server, if you need to specify multiple modify the Deployment after creation
  displayName: CORS Allowed Origin
  name: CORS_ALLOWED_ORIGIN
  required: true
  value: 10.192.213.116
- description: Name of the service catalog image to use for apiserver and controller-manager
  displayName: Service catalog image name
  name: SERVICE_CATALOG_IMAGE
  required: true
  value: openshift/origin-service-catalog:latest
- description: Cluster ip address for the service catalog service
  displayName: Service Catalog Service IP
  name: SERVICE_CATALOG_SERVICE_IP
  required: true
  value: 172.30.1.2
- description: Do not change this value.
  displayName: Name of the kube-system namespace
  name: KUBE_SYSTEM_NAMESPACE
  required: true
  value: kube-system
`)

func examplesServiceCatalogServiceCatalogYamlBytes() ([]byte, error) {
	return _examplesServiceCatalogServiceCatalogYaml, nil
}

func examplesServiceCatalogServiceCatalogYaml() (*asset, error) {
	bytes, err := examplesServiceCatalogServiceCatalogYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/service-catalog/service-catalog.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installEtcdEtcdYaml = []byte(`kind: Pod
apiVersion: v1
metadata:
  name: master-etcd
  namespace: kube-system
  labels:
    openshift.io/control-plane: "true"
    openshift.io/component: etcd
spec:
  restartPolicy: Always
  hostNetwork: true
  containers:
  - name: etcd
    image: openshift/origin:latest
    workingDir: /var/lib/etcd
    command: ["/bin/bash", "-c"]
    args:
    - |
      #!/bin/sh
      set -o allexport
      exec openshift start etcd --config=/etc/origin/master/master-config.yaml
    securityContext:
      privileged: true
    volumeMounts:
     - mountPath: /etc/origin/master/
       name: master-config
       readOnly: true
     - mountPath: /var/lib/etcd/
       name: master-data
  volumes:
  - name: master-config
    hostPath:
      path: /path/to/master/config-dir
  - name: master-data
    ETCD_VOLUME
`)

func installEtcdEtcdYamlBytes() ([]byte, error) {
	return _installEtcdEtcdYaml, nil
}

func installEtcdEtcdYaml() (*asset, error) {
	bytes, err := installEtcdEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/etcd/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installKubeApiserverApiserverYaml = []byte(`kind: Pod
apiVersion: v1
metadata:
  name: master-api
  namespace: kube-system
  labels:
    openshift.io/control-plane: "true"
    openshift.io/component: api
spec:
  restartPolicy: Always
  hostNetwork: true
  containers:
  - name: api
    image: openshift/origin:latest
    command: ["/bin/bash", "-c"]
    args:
    - |
      #!/bin/bash
      set -euo pipefail
      if [[ -f /etc/origin/master/master.env ]]; then
        set -o allexport
        source /etc/origin/master/master.env
      fi
      exec hypershift openshift-kube-apiserver --config=/etc/origin/master/master-config.yaml
    securityContext:
      privileged: true
    volumeMounts:
     - mountPath: /etc/origin/master/
       name: master-config
     - mountPath: /etc/origin/cloudprovider/
       name: master-cloud-provider
     - mountPath: /var/lib/origin/
       name: master-data
    livenessProbe:
      httpGet:
        scheme: HTTPS
        port: 8443
        path: healthz
  volumes:
  - name: master-config
    hostPath:
      path: /path/to/master/config-dir
  - name: master-cloud-provider
    hostPath:
      path: /etc/origin/cloudprovider
  - name: master-data
    hostPath:
      path: /var/lib/origin`)

func installKubeApiserverApiserverYamlBytes() ([]byte, error) {
	return _installKubeApiserverApiserverYaml, nil
}

func installKubeApiserverApiserverYaml() (*asset, error) {
	bytes, err := installKubeApiserverApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/kube-apiserver/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installKubeControllerManagerKubeControllerManagerYaml = []byte(`kind: Pod
apiVersion: v1
metadata:
  name: kube-controller-manager
  namespace: kube-system
  labels:
    openshift.io/control-plane: "true"
    openshift.io/component: controllers
spec:
  restartPolicy: Always
  hostNetwork: true
  containers:
  - name: controllers
    image: openshift/origin:latest
    command: ["hyperkube", "kube-controller-manager"]
    args:
    - "--enable-dynamic-provisioning=true"
    - "--use-service-account-credentials=true"
    - "--leader-elect-retry-period=3s"
    - "--leader-elect-resource-lock=configmaps"
    - "--controllers=*"
    - "--controllers=-ttl"
    - "--controllers=-bootstrapsigner"
    - "--controllers=-tokencleaner"
    - "--controllers=-horizontalpodautoscaling"
    - "--pod-eviction-timeout=5m"
    - "--cluster-signing-key-file="
    - "--cluster-signing-cert-file="
    - "--experimental-cluster-signing-duration=720h"
    - "--root-ca-file=/etc/origin/master/ca-bundle.crt"
    - "--port=10252"
    - "--service-account-private-key-file=/etc/origin/master/serviceaccounts.private.key"
    - "--kubeconfig=/etc/origin/master/openshift-master.kubeconfig"
    - "--openshift-config=/etc/origin/master/master-config.yaml"
    securityContext:
      privileged: true
    volumeMounts:
     - mountPath: /etc/origin/master/
       name: master-config
     - mountPath: /etc/origin/cloudprovider/
       name: master-cloud-provider
    livenessProbe:
      httpGet:
        scheme: HTTP
        port: 10252
        path: healthz
  volumes:
  - name: master-config
    hostPath:
      path: /path/to/master/config-dir
  - name: master-cloud-provider
    hostPath:
      path: /etc/origin/cloudprovider`)

func installKubeControllerManagerKubeControllerManagerYamlBytes() ([]byte, error) {
	return _installKubeControllerManagerKubeControllerManagerYaml, nil
}

func installKubeControllerManagerKubeControllerManagerYaml() (*asset, error) {
	bytes, err := installKubeControllerManagerKubeControllerManagerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/kube-controller-manager/kube-controller-manager.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installKubeDnsInstallYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: kube-dns
parameters:
- name: NAMESPACE
  value: kube-dns
- name: IMAGE
  value: openshift/origin:latest
- name: LOGLEVEL
  value: "0"
- name: KUBEDNS_CONFIG_HOST_PATH
- name: NODE_SELECTOR
  value: "{}"
objects:

# ok follow the crazy.  For cluster up to work, I need a resolv.conf for my kubelet
# You can't set a port in a resolv.conf
# cluster up probably can't bind to the actual 53 on the local system
# that means creating a pod that DOES NOT RUN ON THE HOST NETWORK and binding 53 there
# then we create service pointing there
# but the openshift-controller-manager needs kube-dns
# so we have to run it as an upstream workload, daemonset sounds good so I can use
# the same masterconfig
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    labels:
      k8s-app: kube-dns
    name: kube-dns
    namespace: ${NAMESPACE}
  spec:
    selector:
      matchLabels:
        k8s-app: kube-dns
    template:
      metadata:
        labels:
          k8s-app: kube-dns
      spec:
        serviceAccountName: kube-dns
        containers:
        - name: kube-proxy
          image: ${IMAGE}
          command: ["openshift", "start", "node"]
          args:
          - "--enable=dns"
          - "--config=/etc/origin/node/node-config.yaml"
          securityContext:
            privileged: true
            runAsUser: 0
          volumeMounts:
           - mountPath: /etc/origin/node/
             name: node-config
             readOnly: true
        volumes:
        - name: node-config
          hostPath:
            path: ${KUBEDNS_CONFIG_HOST_PATH}

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: kube-dns
    namespace: ${NAMESPACE}

- apiVersion: v1
  kind: Service
  metadata:
    name: kube-dns
    namespace: ${NAMESPACE}
  spec:
    clusterIP: 172.30.0.2
    selector:
      k8s-app: kube-dns
    ports:
    - name: dns-udp
      port: 53
      protocol: UDP
    - name: dns-tcp
      port: 53
      protocol: TCP
`)

func installKubeDnsInstallYamlBytes() ([]byte, error) {
	return _installKubeDnsInstallYaml, nil
}

func installKubeDnsInstallYaml() (*asset, error) {
	bytes, err := installKubeDnsInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/kube-dns/install.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installKubeProxyInstallYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: kube-proxy
parameters:
- name: IMAGE
  value: openshift/origin:latest
- name: NAMESPACE
  value: kube-proxy
- name: LOGLEVEL
  value: "0"
- name: NODE_CONFIG_HOST_PATH
- name: NODE_SELECTOR
  value: "{}"
objects:

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: kube-proxy
    namespace: ${NAMESPACE}

- kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: system:kube-proxy
  subjects:
    - kind: ServiceAccount
      name: kube-proxy
      namespace: ${NAMESPACE}
  roleRef:
    kind: ClusterRole
    name: system:node-proxier
    apiGroup: rbac.authorization.k8s.io

- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    labels:
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: ${NAMESPACE}
  spec:
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        labels:
          k8s-app: kube-proxy
      spec:
        serviceAccountName: kube-proxy
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: ${IMAGE}
          command: ["openshift", "start", "node"]
          args:
          - "--enable=proxy"
          - "--listen=https://0.0.0.0:8444"
          - "--config=/etc/origin/node/node-config.yaml"
          securityContext:
            privileged: true
            runAsUser: 0
          volumeMounts:
           - mountPath: /etc/origin/node/
             name: node-config
             readOnly: true
        volumes:
        - name: node-config
          hostPath:
            path: ${NODE_CONFIG_HOST_PATH}
`)

func installKubeProxyInstallYamlBytes() ([]byte, error) {
	return _installKubeProxyInstallYaml, nil
}

func installKubeProxyInstallYaml() (*asset, error) {
	bytes, err := installKubeProxyInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/kube-proxy/install.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installKubeSchedulerKubeSchedulerYaml = []byte(`kind: Pod
apiVersion: v1
metadata:
  name: kube-scheduler
  namespace: kube-system
  labels:
    openshift.io/control-plane: "true"
    openshift.io/component: scheduler
spec:
  restartPolicy: Always
  hostNetwork: true
  containers:
  - name: scheduler
    image: openshift/origin:latest
    command: ["hyperkube", "kube-scheduler"]
    args:
    - "--leader-elect=true"
    - "--leader-elect-resource-lock=configmaps"
    - "--port=10251"
    - "--kubeconfig=/etc/origin/master/openshift-master.kubeconfig"
    - "--policy-config-file="
    securityContext:
      privileged: true
    volumeMounts:
     - mountPath: /etc/origin/master/
       name: master-config
     - mountPath: /etc/origin/cloudprovider/
       name: master-cloud-provider
    livenessProbe:
      httpGet:
        scheme: HTTP
        port: 10251
        path: healthz
  volumes:
  - name: master-config
    hostPath:
      path: /path/to/master/config-dir
  - name: master-cloud-provider
    hostPath:
      path: /etc/origin/cloudprovider`)

func installKubeSchedulerKubeSchedulerYamlBytes() ([]byte, error) {
	return _installKubeSchedulerKubeSchedulerYaml, nil
}

func installKubeSchedulerKubeSchedulerYaml() (*asset, error) {
	bytes, err := installKubeSchedulerKubeSchedulerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/kube-scheduler/kube-scheduler.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installOpenshiftApiserverInstallYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: openshift-apiserver
parameters:
- name: IMAGE
  value: openshift/origin:latest
- name: NAMESPACE
  value: openshift-apiserver
- name: LOGLEVEL
  value: "0"
- name: OPENSHIFT_APISERVER_CONFIG_HOST_PATH
- name: NODE_SELECTOR
  value: "{}"
objects:

- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    namespace: ${NAMESPACE}
    name: openshift-apiserver
    labels:
      openshift.io/control-plane: "true"
      openshift.io/component: api
  spec:
    selector:
      matchLabels:
        openshift.io/control-plane: "true"
        openshift.io/component: api
    template:
      metadata:
        name: openshift-apiserver
        labels:
          openshift.io/control-plane: "true"
          openshift.io/component: api
      spec:
        serviceAccountName: openshift-apiserver
        restartPolicy: Always
        hostNetwork: true
        containers:
        - name: apiserver
          image: ${IMAGE}
          imagePullPolicy: IfNotPresent
          env:
          - name: ADDITIONAL_ALLOWED_REGISTRIES
            value: registry.centos.org
          command: ["hypershift", "openshift-apiserver"]
          args:
          - "--config=/etc/origin/master/master-config.yaml"
          - "-v=${LOGLEVEL}"
          ports:
          - containerPort: 8445
          securityContext:
            privileged: true
            runAsUser: 0
          volumeMounts:
           - mountPath: /etc/origin/master/
             name: master-config
           - mountPath: /etc/origin/cloudprovider/
             name: master-cloud-provider
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8445
              scheme: HTTPS
        # sensitive files still sit on disk for now
        volumes:
        - name: master-config
          hostPath:
            path: ${OPENSHIFT_APISERVER_CONFIG_HOST_PATH}
        - name: master-cloud-provider
          hostPath:
            path: /etc/origin/cloudprovider


# to be able to assign powers to the process
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    namespace: ${NAMESPACE}
    name: openshift-apiserver

- apiVersion: v1
  kind: Service
  metadata:
    namespace: ${NAMESPACE}
    name: api
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: apiserver-serving-cert
  spec:
    selector:
      openshift.io/component: api
    ports:
    - name: https
      port: 443
      targetPort: 8445

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.apps.openshift.io
  spec:
    group: apps.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.authorization.openshift.io
  spec:
    group: authorization.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.build.openshift.io
  spec:
    group: build.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.image.openshift.io
  spec:
    group: image.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.network.openshift.io
  spec:
    group: network.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.oauth.openshift.io
  spec:
    group: oauth.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.project.openshift.io
  spec:
    group: project.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.quota.openshift.io
  spec:
    group: quota.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.route.openshift.io
  spec:
    group: route.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.security.openshift.io
  spec:
    group: security.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.template.openshift.io
  spec:
    group: template.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1.user.openshift.io
  spec:
    group: user.openshift.io
    version: v1
    service:
      namespace: openshift-apiserver
      name: api
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 9900
    versionPriority: 15
`)

func installOpenshiftApiserverInstallYamlBytes() ([]byte, error) {
	return _installOpenshiftApiserverInstallYaml, nil
}

func installOpenshiftApiserverInstallYaml() (*asset, error) {
	bytes, err := installOpenshiftApiserverInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/openshift-apiserver/install.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installOpenshiftControllerManagerInstallYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: openshift-controller-manager
parameters:
- name: IMAGE
  value: openshift/origin:latest
- name: NAMESPACE
  value: openshift-controller-manager
- name: LOGLEVEL
  value: "0"
- name: OPENSHIFT_CONTROLLER_MANAGER_CONFIG_HOST_PATH
- name: NODE_SELECTOR
  value: "{}"
objects:

# to create the tsb server
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    namespace: ${NAMESPACE}
    name: openshift-controller-manager
    labels:
      openshift.io/control-plane: "true"
      openshift.io/component: controllers
  spec:
    selector:
      matchLabels:
        openshift.io/control-plane: "true"
        openshift.io/component: controllers
    template:
      metadata:
        name: openshift-controller-manager
        labels:
          openshift.io/control-plane: "true"
          openshift.io/component: controllers
      spec:
        serviceAccountName: openshift-controller-manager
        restartPolicy: Always
        hostNetwork: true
        containers:
        - name: c
          image: ${IMAGE}
          imagePullPolicy: IfNotPresent
          command: ["hypershift", "openshift-controller-manager"]
          args:
          - "--config=/etc/origin/master/master-config.yaml"
          - "--v=${LOGLEVEL}"
          ports:
          - containerPort: 8444
          securityContext:
            privileged: true
            runAsUser: 0
          volumeMounts:
           - mountPath: /etc/origin/master/
             name: master-config
           - mountPath: /etc/origin/cloudprovider/
             name: master-cloud-provider
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8444
              scheme: HTTPS
        # sensitive files still sit on disk for now
        volumes:
        - name: master-config
          hostPath:
            path: ${OPENSHIFT_CONTROLLER_MANAGER_CONFIG_HOST_PATH}
        - name: master-cloud-provider
          hostPath:
            path: /etc/origin/cloudprovider


# to be able to assign powers to the process
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    namespace: ${NAMESPACE}
    name: openshift-controller-manager

`)

func installOpenshiftControllerManagerInstallYamlBytes() ([]byte, error) {
	return _installOpenshiftControllerManagerInstallYaml, nil
}

func installOpenshiftControllerManagerInstallYaml() (*asset, error) {
	bytes, err := installOpenshiftControllerManagerInstallYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/openshift-controller-manager/install.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installOriginWebConsoleConsoleConfigYaml = []byte(`apiVersion: webconsole.config.openshift.io/v1
kind: WebConsoleConfiguration
clusterInfo:
  consolePublicURL: https://127.0.0.1:8443/console/
  loggingPublicURL: ""
  logoutPublicURL: ""
  masterPublicURL: https://127.0.0.1:8443
  metricsPublicURL: ""
extensions:
  scriptURLs: []
  stylesheetURLs: []
  properties: null
features:
  inactivityTimeoutMinutes: 0
  clusterResourceOverridesEnabled: false
servingInfo:
  bindAddress: 0.0.0.0:8443
  bindNetwork: tcp4
  certFile: /var/serving-cert/tls.crt
  clientCA: ""
  keyFile: /var/serving-cert/tls.key
  maxRequestsInFlight: 0
  namedCertificates: null
  requestTimeoutSeconds: 0
`)

func installOriginWebConsoleConsoleConfigYamlBytes() ([]byte, error) {
	return _installOriginWebConsoleConsoleConfigYaml, nil
}

func installOriginWebConsoleConsoleConfigYaml() (*asset, error) {
	bytes, err := installOriginWebConsoleConsoleConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/origin-web-console/console-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installOriginWebConsoleConsoleTemplateYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: openshift-web-console
  annotations:
    openshift.io/display-name: OpenShift Web Console
    description: The server for the OpenShift web console.
    iconClass: icon-openshift
    tags: openshift,infra
    openshift.io/documentation-url: https://github.com/openshift/origin-web-console-server
    openshift.io/support-url: https://access.redhat.com
    openshift.io/provider-display-name: Red Hat, Inc.
parameters:
- name: IMAGE
  value: openshift/origin-web-console:latest
- name: NAMESPACE
  # This namespace cannot be changed. Only `+"`"+`openshift-web-console`+"`"+` is supported.
  value: openshift-web-console
- name: LOGLEVEL
  value: "0"
- name: API_SERVER_CONFIG
- name: NODE_SELECTOR
  value: "{}"
- name: REPLICA_COUNT
  value: "1"
objects:

# to create the web console server
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    namespace: ${NAMESPACE}
    name: webconsole
    labels:
      app: openshift-web-console
      webconsole: "true"
  spec:
    replicas: "${{REPLICA_COUNT}}"
    strategy:
      type: Recreate
    template:
      metadata:
        name: webconsole
        labels:
          app: openshift-web-console
          webconsole: "true"
      spec:
        serviceAccountName: webconsole
        containers:
        - name: webconsole
          image: ${IMAGE}
          imagePullPolicy: IfNotPresent
          command:
          - "/usr/bin/origin-web-console"
          - "--audit-log-path=-"
          - "-v=${LOGLEVEL}"
          - "--config=/var/webconsole-config/webconsole-config.yaml"
          ports:
          - containerPort: 8443
          volumeMounts:
          - mountPath: /var/serving-cert
            name: serving-cert
          - mountPath: /var/webconsole-config
            name: webconsole-config
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -i
                - -c
                - |-
                  if [[ ! -f /tmp/webconsole-config.hash ]]; then \
                    md5sum /var/webconsole-config/webconsole-config.yaml > /tmp/webconsole-config.hash; \
                  elif [[ $(md5sum /var/webconsole-config/webconsole-config.yaml) != $(cat /tmp/webconsole-config.hash) ]]; then \
                    exit 1; \
                  fi && curl -k -f https://0.0.0.0:8443/console/
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
        nodeSelector: "${{NODE_SELECTOR}}"
        volumes:
        - name: serving-cert
          secret:
            defaultMode: 400
            secretName: webconsole-serving-cert
        - name: webconsole-config
          configMap:
            defaultMode: 440
            name: webconsole-config

# to create the config for the web console
- apiVersion: v1
  kind: ConfigMap
  metadata:
    namespace: ${NAMESPACE}
    name: webconsole-config
    labels:
      app: openshift-web-console
  data:
    webconsole-config.yaml: ${API_SERVER_CONFIG}

# to be able to assign powers to the process
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    namespace: ${NAMESPACE}
    name: webconsole
    labels:
      app: openshift-web-console

# to be able to expose web console inside the cluster
- apiVersion: v1
  kind: Service
  metadata:
    namespace: ${NAMESPACE}
    name: webconsole
    labels:
      app: openshift-web-console
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: webconsole-serving-cert
      prometheus.io/scrape: "true"
      prometheus.io/scheme: https
  spec:
    selector:
      webconsole: "true"
    ports:
    - name: https
      port: 443
      targetPort: 8443
`)

func installOriginWebConsoleConsoleTemplateYamlBytes() ([]byte, error) {
	return _installOriginWebConsoleConsoleTemplateYaml, nil
}

func installOriginWebConsoleConsoleTemplateYaml() (*asset, error) {
	bytes, err := installOriginWebConsoleConsoleTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/origin-web-console/console-template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installServiceCatalogBrokerResourcesTemplateServiceBrokerRegistrationYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: template-service-broker-registration
parameters:
- name: TSB_NAMESPACE
  value: openshift-template-service-broker
- name: CA_BUNDLE
  required: true
objects:
# register the tsb with the service catalog
- apiVersion: servicecatalog.k8s.io/v1beta1
  kind: ClusterServiceBroker
  metadata:
    name: template-service-broker
  spec:
    url: https://apiserver.${TSB_NAMESPACE}.svc:443/brokers/template.openshift.io
    insecureSkipTLSVerify: false
    caBundle: ${CA_BUNDLE}
    authInfo: 
      bearer: 
        secretRef:
          kind:      Secret
          name:      templateservicebroker-client
          namespace: ${TSB_NAMESPACE}
`)

func installServiceCatalogBrokerResourcesTemplateServiceBrokerRegistrationYamlBytes() ([]byte, error) {
	return _installServiceCatalogBrokerResourcesTemplateServiceBrokerRegistrationYaml, nil
}

func installServiceCatalogBrokerResourcesTemplateServiceBrokerRegistrationYaml() (*asset, error) {
	bytes, err := installServiceCatalogBrokerResourcesTemplateServiceBrokerRegistrationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/service-catalog-broker-resources/template-service-broker-registration.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installTemplateservicebrokerApiserverConfigYaml = []byte(`kind: TemplateServiceBrokerConfig
apiVersion: config.templateservicebroker.openshift.io/v1
templateNamespaces:
- openshift
`)

func installTemplateservicebrokerApiserverConfigYamlBytes() ([]byte, error) {
	return _installTemplateservicebrokerApiserverConfigYaml, nil
}

func installTemplateservicebrokerApiserverConfigYaml() (*asset, error) {
	bytes, err := installTemplateservicebrokerApiserverConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/templateservicebroker/apiserver-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installTemplateservicebrokerApiserverTemplateYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: template-service-broker-apiserver
parameters:
- name: IMAGE
  value: openshift/origin-template-service-broker:latest
- name: NAMESPACE
  value: openshift-template-service-broker
- name: LOGLEVEL
  value: "0"
- name: API_SERVER_CONFIG
  value: |
   kind: TemplateServiceBrokerConfig
   apiVersion: config.templateservicebroker.openshift.io/v1
   templateNamespaces:
   - openshift
- name: NODE_SELECTOR
  value: "{}"
objects:

# to create the tsb server
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    namespace: ${NAMESPACE}
    name: apiserver
    labels:
      apiserver: "true"
  spec:
    template:
      metadata:
        name: apiserver
        labels:
          apiserver: "true"
      spec:
        serviceAccountName: apiserver
        containers:
        - name: c
          image: ${IMAGE}
          imagePullPolicy: IfNotPresent
          command:
          - "/usr/bin/template-service-broker"
          - "start"
          - "template-service-broker"
          - "--secure-port=8443"
          - "--audit-log-path=-"
          - "--tls-cert-file=/var/serving-cert/tls.crt"
          - "--tls-private-key-file=/var/serving-cert/tls.key"
          - "-v=${LOGLEVEL}"
          - "--config=/var/apiserver-config/apiserver-config.yaml"
          ports:
          - containerPort: 8443
          volumeMounts:
          - mountPath: /var/serving-cert
            name: serving-cert
          - mountPath: /var/apiserver-config
            name: apiserver-config
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
        nodeSelector: "${{NODE_SELECTOR}}"
        volumes:
        - name: serving-cert
          secret:
            defaultMode: 420
            secretName: apiserver-serving-cert
        - name: apiserver-config
          configMap:
            defaultMode: 420
            name: apiserver-config

# to create the config for the TSB
- apiVersion: v1
  kind: ConfigMap
  metadata:
    namespace: ${NAMESPACE}
    name: apiserver-config
  data:
    apiserver-config.yaml: ${API_SERVER_CONFIG}

# to be able to assign powers to the process
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    namespace: ${NAMESPACE}
    name: apiserver

# to be able to expose TSB inside the cluster
- apiVersion: v1
  kind: Service
  metadata:
    namespace: ${NAMESPACE}
    name: apiserver
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: apiserver-serving-cert
  spec:
    selector:
      apiserver: "true"
    ports:
    - name: https
      port: 443
      targetPort: 8443

# This service account will be granted permission to call the TSB.
# The token for this SA will be provided to the service catalog for
# use when calling the TSB.
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    namespace: ${NAMESPACE}
    name: templateservicebroker-client

# This secret will be populated with a copy of the templateservicebroker-client SA's
# auth token.  Since this secret has a static name, it can be referenced more
# easily than the auto-generated secret for the service account.
- apiVersion: v1
  kind: Secret
  metadata:
    namespace: ${NAMESPACE}
    name: templateservicebroker-client
    annotations:
      kubernetes.io/service-account.name: templateservicebroker-client
  type: kubernetes.io/service-account-token
`)

func installTemplateservicebrokerApiserverTemplateYamlBytes() ([]byte, error) {
	return _installTemplateservicebrokerApiserverTemplateYaml, nil
}

func installTemplateservicebrokerApiserverTemplateYaml() (*asset, error) {
	bytes, err := installTemplateservicebrokerApiserverTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/templateservicebroker/apiserver-template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installTemplateservicebrokerRbacTemplateYaml = []byte(`apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: template-service-broker-rbac
parameters:
- name: NAMESPACE
  value: openshift-template-service-broker
- name: KUBE_SYSTEM
  value: kube-system
objects:

# Grant the service account permission to call the TSB
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: templateservicebroker-client
  roleRef:
    kind: ClusterRole
    name: system:openshift:templateservicebroker-client
  subjects:
  - kind: ServiceAccount
    namespace: ${NAMESPACE}
    name: templateservicebroker-client

# to delegate authentication and authorization
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: auth-delegator-${NAMESPACE}
  roleRef:
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    namespace: ${NAMESPACE}
    name: apiserver

# to have the template service broker powers
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: tsb-${NAMESPACE}
  roleRef:
    kind: ClusterRole
    name: system:openshift:controller:template-service-broker
  subjects:
  - kind: ServiceAccount
    namespace: ${NAMESPACE}
    name: apiserver

# to read the config for terminating authentication
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    namespace: ${KUBE_SYSTEM}
    name: extension-apiserver-authentication-reader-${NAMESPACE}
  roleRef:
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - kind: ServiceAccount
    namespace: ${NAMESPACE}
    name: apiserver

# allow the kube service catalog's SA to read the static secret defined
# above, which will contain the token for the SA that can call the TSB.
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    name: templateservicebroker-auth-reader
    namespace: ${NAMESPACE}
  rules:
  - apiGroups:
    - ""
    resourceNames:
    - templateservicebroker-client
    resources:
    - secrets
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    namespace: ${NAMESPACE}
    name: templateservicebroker-auth-reader
  roleRef:
    kind: Role
    name: templateservicebroker-auth-reader
  subjects:
  - kind: ServiceAccount
    namespace: kube-service-catalog
    name: service-catalog-controller
`)

func installTemplateservicebrokerRbacTemplateYamlBytes() ([]byte, error) {
	return _installTemplateservicebrokerRbacTemplateYaml, nil
}

func installTemplateservicebrokerRbacTemplateYaml() (*asset, error) {
	bytes, err := installTemplateservicebrokerRbacTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/templateservicebroker/rbac-template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgImageAdmissionApisImagepolicyV1DefaultPolicyYaml = []byte(`kind: ImagePolicyConfig
apiVersion: v1
# To require that all images running on the platform be imported first, you may uncomment the
# following rule. Any image that refers to a registry outside of OpenShift will be rejected unless it
# unless it points directly to an image digest (myregistry.com/myrepo/image@sha256:ea83bcf...) and that
# digest has been imported via the import-image flow.
#resolveImages: Required
executionRules:
- name: execution-denied
  # Reject all images that have the annotation images.openshift.io/deny-execution set to true.
  # This annotation may be set by infrastructure that wishes to flag particular images as dangerous
  onResources:
  - resource: pods
  - resource: builds
  reject: true
  matchImageAnnotations:
  - key: images.openshift.io/deny-execution
    value: "true"
  skipOnResolutionFailure: true
`)

func pkgImageAdmissionApisImagepolicyV1DefaultPolicyYamlBytes() ([]byte, error) {
	return _pkgImageAdmissionApisImagepolicyV1DefaultPolicyYaml, nil
}

func pkgImageAdmissionApisImagepolicyV1DefaultPolicyYaml() (*asset, error) {
	bytes, err := pkgImageAdmissionApisImagepolicyV1DefaultPolicyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/image/admission/apis/imagepolicy/v1/default-policy.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/image-streams/image-streams-centos7.json": examplesImageStreamsImageStreamsCentos7Json,
	"examples/image-streams/image-streams-rhel7.json": examplesImageStreamsImageStreamsRhel7Json,
	"examples/db-templates/mariadb-ephemeral-template.json": examplesDbTemplatesMariadbEphemeralTemplateJson,
	"examples/db-templates/mariadb-persistent-template.json": examplesDbTemplatesMariadbPersistentTemplateJson,
	"examples/db-templates/mongodb-ephemeral-template.json": examplesDbTemplatesMongodbEphemeralTemplateJson,
	"examples/db-templates/mongodb-persistent-template.json": examplesDbTemplatesMongodbPersistentTemplateJson,
	"examples/db-templates/mysql-ephemeral-template.json": examplesDbTemplatesMysqlEphemeralTemplateJson,
	"examples/db-templates/mysql-persistent-template.json": examplesDbTemplatesMysqlPersistentTemplateJson,
	"examples/db-templates/postgresql-ephemeral-template.json": examplesDbTemplatesPostgresqlEphemeralTemplateJson,
	"examples/db-templates/postgresql-persistent-template.json": examplesDbTemplatesPostgresqlPersistentTemplateJson,
	"examples/db-templates/redis-ephemeral-template.json": examplesDbTemplatesRedisEphemeralTemplateJson,
	"examples/db-templates/redis-persistent-template.json": examplesDbTemplatesRedisPersistentTemplateJson,
	"examples/jenkins/jenkins-ephemeral-template.json": examplesJenkinsJenkinsEphemeralTemplateJson,
	"examples/jenkins/jenkins-persistent-template.json": examplesJenkinsJenkinsPersistentTemplateJson,
	"examples/jenkins/pipeline/bluegreen-pipeline.yaml": examplesJenkinsPipelineBluegreenPipelineYaml,
	"examples/jenkins/pipeline/mapsapp-pipeline.yaml": examplesJenkinsPipelineMapsappPipelineYaml,
	"examples/jenkins/pipeline/maven-pipeline.yaml": examplesJenkinsPipelineMavenPipelineYaml,
	"examples/jenkins/pipeline/nodejs-sample-pipeline.yaml": examplesJenkinsPipelineNodejsSamplePipelineYaml,
	"examples/jenkins/pipeline/openshift-client-plugin-pipeline.yaml": examplesJenkinsPipelineOpenshiftClientPluginPipelineYaml,
	"examples/jenkins/pipeline/samplepipeline.yaml": examplesJenkinsPipelineSamplepipelineYaml,
	"examples/quickstarts/cakephp-mysql-persistent.json": examplesQuickstartsCakephpMysqlPersistentJson,
	"examples/quickstarts/cakephp-mysql.json": examplesQuickstartsCakephpMysqlJson,
	"examples/quickstarts/dancer-mysql-persistent.json": examplesQuickstartsDancerMysqlPersistentJson,
	"examples/quickstarts/dancer-mysql.json": examplesQuickstartsDancerMysqlJson,
	"examples/quickstarts/django-postgresql-persistent.json": examplesQuickstartsDjangoPostgresqlPersistentJson,
	"examples/quickstarts/django-postgresql.json": examplesQuickstartsDjangoPostgresqlJson,
	"examples/quickstarts/httpd.json": examplesQuickstartsHttpdJson,
	"examples/quickstarts/nginx.json": examplesQuickstartsNginxJson,
	"examples/quickstarts/nodejs-mongodb-persistent.json": examplesQuickstartsNodejsMongodbPersistentJson,
	"examples/quickstarts/nodejs-mongodb.json": examplesQuickstartsNodejsMongodbJson,
	"examples/quickstarts/rails-postgresql-persistent.json": examplesQuickstartsRailsPostgresqlPersistentJson,
	"examples/quickstarts/rails-postgresql.json": examplesQuickstartsRailsPostgresqlJson,
	"examples/heapster/heapster-standalone.yaml": examplesHeapsterHeapsterStandaloneYaml,
	"examples/prometheus/prometheus.yaml": examplesPrometheusPrometheusYaml,
	"examples/service-catalog/service-catalog.yaml": examplesServiceCatalogServiceCatalogYaml,
	"install/etcd/etcd.yaml": installEtcdEtcdYaml,
	"install/kube-apiserver/apiserver.yaml": installKubeApiserverApiserverYaml,
	"install/kube-controller-manager/kube-controller-manager.yaml": installKubeControllerManagerKubeControllerManagerYaml,
	"install/kube-dns/install.yaml": installKubeDnsInstallYaml,
	"install/kube-proxy/install.yaml": installKubeProxyInstallYaml,
	"install/kube-scheduler/kube-scheduler.yaml": installKubeSchedulerKubeSchedulerYaml,
	"install/openshift-apiserver/install.yaml": installOpenshiftApiserverInstallYaml,
	"install/openshift-controller-manager/install.yaml": installOpenshiftControllerManagerInstallYaml,
	"install/origin-web-console/console-config.yaml": installOriginWebConsoleConsoleConfigYaml,
	"install/origin-web-console/console-template.yaml": installOriginWebConsoleConsoleTemplateYaml,
	"install/service-catalog-broker-resources/template-service-broker-registration.yaml": installServiceCatalogBrokerResourcesTemplateServiceBrokerRegistrationYaml,
	"install/templateservicebroker/apiserver-config.yaml": installTemplateservicebrokerApiserverConfigYaml,
	"install/templateservicebroker/apiserver-template.yaml": installTemplateservicebrokerApiserverTemplateYaml,
	"install/templateservicebroker/rbac-template.yaml": installTemplateservicebrokerRbacTemplateYaml,
	"pkg/image/admission/apis/imagepolicy/v1/default-policy.yaml": pkgImageAdmissionApisImagepolicyV1DefaultPolicyYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"examples": &bintree{nil, map[string]*bintree{
		"db-templates": &bintree{nil, map[string]*bintree{
			"mariadb-ephemeral-template.json": &bintree{examplesDbTemplatesMariadbEphemeralTemplateJson, map[string]*bintree{}},
			"mariadb-persistent-template.json": &bintree{examplesDbTemplatesMariadbPersistentTemplateJson, map[string]*bintree{}},
			"mongodb-ephemeral-template.json": &bintree{examplesDbTemplatesMongodbEphemeralTemplateJson, map[string]*bintree{}},
			"mongodb-persistent-template.json": &bintree{examplesDbTemplatesMongodbPersistentTemplateJson, map[string]*bintree{}},
			"mysql-ephemeral-template.json": &bintree{examplesDbTemplatesMysqlEphemeralTemplateJson, map[string]*bintree{}},
			"mysql-persistent-template.json": &bintree{examplesDbTemplatesMysqlPersistentTemplateJson, map[string]*bintree{}},
			"postgresql-ephemeral-template.json": &bintree{examplesDbTemplatesPostgresqlEphemeralTemplateJson, map[string]*bintree{}},
			"postgresql-persistent-template.json": &bintree{examplesDbTemplatesPostgresqlPersistentTemplateJson, map[string]*bintree{}},
			"redis-ephemeral-template.json": &bintree{examplesDbTemplatesRedisEphemeralTemplateJson, map[string]*bintree{}},
			"redis-persistent-template.json": &bintree{examplesDbTemplatesRedisPersistentTemplateJson, map[string]*bintree{}},
		}},
		"heapster": &bintree{nil, map[string]*bintree{
			"heapster-standalone.yaml": &bintree{examplesHeapsterHeapsterStandaloneYaml, map[string]*bintree{}},
		}},
		"image-streams": &bintree{nil, map[string]*bintree{
			"image-streams-centos7.json": &bintree{examplesImageStreamsImageStreamsCentos7Json, map[string]*bintree{}},
			"image-streams-rhel7.json": &bintree{examplesImageStreamsImageStreamsRhel7Json, map[string]*bintree{}},
		}},
		"jenkins": &bintree{nil, map[string]*bintree{
			"jenkins-ephemeral-template.json": &bintree{examplesJenkinsJenkinsEphemeralTemplateJson, map[string]*bintree{}},
			"jenkins-persistent-template.json": &bintree{examplesJenkinsJenkinsPersistentTemplateJson, map[string]*bintree{}},
			"pipeline": &bintree{nil, map[string]*bintree{
				"bluegreen-pipeline.yaml": &bintree{examplesJenkinsPipelineBluegreenPipelineYaml, map[string]*bintree{}},
				"mapsapp-pipeline.yaml": &bintree{examplesJenkinsPipelineMapsappPipelineYaml, map[string]*bintree{}},
				"maven-pipeline.yaml": &bintree{examplesJenkinsPipelineMavenPipelineYaml, map[string]*bintree{}},
				"nodejs-sample-pipeline.yaml": &bintree{examplesJenkinsPipelineNodejsSamplePipelineYaml, map[string]*bintree{}},
				"openshift-client-plugin-pipeline.yaml": &bintree{examplesJenkinsPipelineOpenshiftClientPluginPipelineYaml, map[string]*bintree{}},
				"samplepipeline.yaml": &bintree{examplesJenkinsPipelineSamplepipelineYaml, map[string]*bintree{}},
			}},
		}},
		"prometheus": &bintree{nil, map[string]*bintree{
			"prometheus.yaml": &bintree{examplesPrometheusPrometheusYaml, map[string]*bintree{}},
		}},
		"quickstarts": &bintree{nil, map[string]*bintree{
			"cakephp-mysql-persistent.json": &bintree{examplesQuickstartsCakephpMysqlPersistentJson, map[string]*bintree{}},
			"cakephp-mysql.json": &bintree{examplesQuickstartsCakephpMysqlJson, map[string]*bintree{}},
			"dancer-mysql-persistent.json": &bintree{examplesQuickstartsDancerMysqlPersistentJson, map[string]*bintree{}},
			"dancer-mysql.json": &bintree{examplesQuickstartsDancerMysqlJson, map[string]*bintree{}},
			"django-postgresql-persistent.json": &bintree{examplesQuickstartsDjangoPostgresqlPersistentJson, map[string]*bintree{}},
			"django-postgresql.json": &bintree{examplesQuickstartsDjangoPostgresqlJson, map[string]*bintree{}},
			"httpd.json": &bintree{examplesQuickstartsHttpdJson, map[string]*bintree{}},
			"nginx.json": &bintree{examplesQuickstartsNginxJson, map[string]*bintree{}},
			"nodejs-mongodb-persistent.json": &bintree{examplesQuickstartsNodejsMongodbPersistentJson, map[string]*bintree{}},
			"nodejs-mongodb.json": &bintree{examplesQuickstartsNodejsMongodbJson, map[string]*bintree{}},
			"rails-postgresql-persistent.json": &bintree{examplesQuickstartsRailsPostgresqlPersistentJson, map[string]*bintree{}},
			"rails-postgresql.json": &bintree{examplesQuickstartsRailsPostgresqlJson, map[string]*bintree{}},
		}},
		"service-catalog": &bintree{nil, map[string]*bintree{
			"service-catalog.yaml": &bintree{examplesServiceCatalogServiceCatalogYaml, map[string]*bintree{}},
		}},
	}},
	"install": &bintree{nil, map[string]*bintree{
		"etcd": &bintree{nil, map[string]*bintree{
			"etcd.yaml": &bintree{installEtcdEtcdYaml, map[string]*bintree{}},
		}},
		"kube-apiserver": &bintree{nil, map[string]*bintree{
			"apiserver.yaml": &bintree{installKubeApiserverApiserverYaml, map[string]*bintree{}},
		}},
		"kube-controller-manager": &bintree{nil, map[string]*bintree{
			"kube-controller-manager.yaml": &bintree{installKubeControllerManagerKubeControllerManagerYaml, map[string]*bintree{}},
		}},
		"kube-dns": &bintree{nil, map[string]*bintree{
			"install.yaml": &bintree{installKubeDnsInstallYaml, map[string]*bintree{}},
		}},
		"kube-proxy": &bintree{nil, map[string]*bintree{
			"install.yaml": &bintree{installKubeProxyInstallYaml, map[string]*bintree{}},
		}},
		"kube-scheduler": &bintree{nil, map[string]*bintree{
			"kube-scheduler.yaml": &bintree{installKubeSchedulerKubeSchedulerYaml, map[string]*bintree{}},
		}},
		"openshift-apiserver": &bintree{nil, map[string]*bintree{
			"install.yaml": &bintree{installOpenshiftApiserverInstallYaml, map[string]*bintree{}},
		}},
		"openshift-controller-manager": &bintree{nil, map[string]*bintree{
			"install.yaml": &bintree{installOpenshiftControllerManagerInstallYaml, map[string]*bintree{}},
		}},
		"origin-web-console": &bintree{nil, map[string]*bintree{
			"console-config.yaml": &bintree{installOriginWebConsoleConsoleConfigYaml, map[string]*bintree{}},
			"console-template.yaml": &bintree{installOriginWebConsoleConsoleTemplateYaml, map[string]*bintree{}},
		}},
		"service-catalog-broker-resources": &bintree{nil, map[string]*bintree{
			"template-service-broker-registration.yaml": &bintree{installServiceCatalogBrokerResourcesTemplateServiceBrokerRegistrationYaml, map[string]*bintree{}},
		}},
		"templateservicebroker": &bintree{nil, map[string]*bintree{
			"apiserver-config.yaml": &bintree{installTemplateservicebrokerApiserverConfigYaml, map[string]*bintree{}},
			"apiserver-template.yaml": &bintree{installTemplateservicebrokerApiserverTemplateYaml, map[string]*bintree{}},
			"rbac-template.yaml": &bintree{installTemplateservicebrokerRbacTemplateYaml, map[string]*bintree{}},
		}},
	}},
	"pkg": &bintree{nil, map[string]*bintree{
		"image": &bintree{nil, map[string]*bintree{
			"admission": &bintree{nil, map[string]*bintree{
				"apis": &bintree{nil, map[string]*bintree{
					"imagepolicy": &bintree{nil, map[string]*bintree{
						"v1": &bintree{nil, map[string]*bintree{
							"default-policy.yaml": &bintree{pkgImageAdmissionApisImagepolicyV1DefaultPolicyYaml, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

