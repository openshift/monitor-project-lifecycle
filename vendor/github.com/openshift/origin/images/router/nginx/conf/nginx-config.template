{{/*
    nginx.config: contains the main config with helper backends that are used to terminate
    					encryption before finally sending to a host_be which is the backend that is the final
    					backend for a route and contains all the endpoints for the service
*/}}
{{- define "/var/lib/nginx/conf/nginx.config" -}}
{{- $workingDir := .WorkingDir }}
#user       www www;  ## Default: nobody
worker_processes  5;  ## Default: 1
error_log  /var/lib/nginx/logs/error.log;
pid        /var/lib/nginx/logs/nginx.pid;
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  #include    conf/mime.types;
  #include    /etc/nginx/proxy.conf;
  #include    /etc/nginx/fastcgi.conf;
  index    index.html index.htm index.php;

  ssl_certificate     {{$workingDir}}/certs/default.pem;
  ssl_certificate_key {{$workingDir}}/certs/default.pem;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log   /var/lib/nginx/logs/access.log  main;
  sendfile     on;
  tcp_nopush   on;
  server_names_hash_bucket_size 128; # this seems to be required for some vhosts



{{- range $cfgIdx, $cfg := .State }}

  upstream be_{{$cfg.Namespace}}_{{$cfg.Name}} {
    {{- range $serviceUnitName, $weight := $cfg.ServiceUnitNames }}
      {{- with $serviceUnit := index $.ServiceUnits $serviceUnitName }}
        {{- range $idx, $endpoint := endpointsForAlias $cfg $serviceUnit }}
    server {{$endpoint.IP}}:{{$endpoint.Port}};
        {{ end -}}
      {{ end -}}
    {{ end -}}
  }

  server { # simple load balancing
 {{- if (eq $cfg.TLSTermination "") }}
    listen          80;
 {{- else }}
    listen          443 ssl;
 {{ end -}}
 
server_name     {{$cfg.Host}};
 {{- if and (ne $cfg.Host "") (or (eq $cfg.TLSTermination "edge") (eq $cfg.TLSTermination "reencrypt")) (eq $cfg.InsecureEdgeTerminationPolicy "Allow") }}
  {{ $cert := index $cfg.Certificates $cfg.Host -}}
  {{ if ne $cert.Contents "" }}
    ssl on;
    ssl_certificate     {{$workingDir}}/certs/{{$cfgIdx}}.pem;
    ssl_certificate_key {{$workingDir}}/certs/{{$cfgIdx}}.pem;
    ssl_session_timeout  5m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM:!LOW:!EXP;
    ssl_prefer_server_ciphers   on;
  {{ end -}}

 {{- else if and (ne $cfg.Host "") (or (eq $cfg.TLSTermination "edge") (eq $cfg.TLSTermination "reencrypt")) (eq $cfg.InsecureEdgeTerminationPolicy "Redirect") }}
 {{/*- else if (eq $cfg.InsecureEdgeTerminationPolicy "Redirect") */}}
  {{ $cert := index $cfg.Certificates $cfg.Host -}}
  {{ if ne $cert.Contents "" }}
    ssl on;
    ssl_certificate     {{$workingDir}}/certs/{{$cfgIdx}}.pem;
    ssl_certificate_key {{$workingDir}}/certs/{{$cfgIdx}}.pem;
    ssl_session_timeout  5m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM:!LOW:!EXP;
    ssl_prefer_server_ciphers   on;
    if ($scheme = http) {
        return   301 https://$host$request_uri;
    }
  {{ end -}}
 {{ end -}}
 
    access_log      /var/lib/nginx/logs/be_{{$cfgIdx}}.log main;

    location / {
      proxy_pass      http://be_{{$cfg.Namespace}}_{{$cfg.Name}};
    }
  }
{{ end -}}{{/* end all routes */}}
}
{{ end -}}{{/* end config file */}}
